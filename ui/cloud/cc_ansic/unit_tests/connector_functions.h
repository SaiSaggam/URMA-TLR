/* ../private/connector_api.c */
#include <stdint.h>
#include "connector_api.h"
#include "connector_def.h"

void connector_debug_line(char const *const format, ...);
void connector_debug_line_beg(char const *const format, ...);
void connector_debug_line_mid(char const *const format, ...);
void connector_debug_line_end(char const *const format, ...);
void connector_debug_print_buffer(char const *const label, void const *const buffer, size_t const length);
connector_status_t get_system_time(connector_data_t *const connector_ptr, unsigned long *const uptime);
connector_callback_status_t connector_callback(connector_callback_t const callback, connector_class_id_t const class_id, connector_request_id_t const request_id, void *const data, void *const context);

connector_status_t malloc_cb(connector_callback_t const callback, size_t const length, void **ptr, void *const context);
connector_status_t malloc_data(connector_data_t *const connector_ptr, size_t const length, void **ptr);
connector_status_t free_data(connector_data_t *const connector_ptr, void *const ptr);
connector_status_t malloc_data_buffer(connector_data_t *const connector_ptr, size_t const length, connector_static_buffer_id_t id, void **ptr);
connector_status_t free_data_buffer(connector_data_t *const connector_ptr, connector_static_buffer_id_t id, void *const ptr);
connector_status_t yield_process(connector_data_t *const connector_ptr, connector_status_t const status);
connector_status_t connector_reboot(connector_data_t *const connector_ptr);
connector_status_t notify_error_status(connector_callback_t const callback, connector_class_id_t const class_number, connector_request_id_t const request_number, connector_status_t const status, void *const context);
connector_status_t get_config_device_id(connector_data_t *const connector_ptr);
connector_status_t get_config_device_cloud_url(connector_data_t *const connector_ptr);
connector_status_t get_config_device_cloud_phone(connector_data_t *const connector_ptr);
connector_status_t set_config_device_cloud_phone(connector_data_t *const connector_ptr, char *phone_number);
connector_status_t get_config_device_cloud_service_id(connector_data_t *const connector_ptr);
connector_status_t get_config_connection_type(connector_data_t *const connector_ptr);
connector_status_t get_config_mac_addr(connector_data_t *const connector_ptr);
connector_status_t get_config_link_speed(connector_data_t *const connector_ptr);
connector_status_t get_config_phone_number(connector_data_t *const connector_ptr);
connector_status_t get_config_device_id_method(connector_data_t *const connector_ptr);
connector_bool_t check_digit_array(uint8_t *const digits, size_t const length, uint8_t const max_digit);
connector_status_t get_config_wan_id(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request_id);
connector_status_t get_config_wan_type(connector_data_t *const connector_ptr);
void edp_reset_initial_data(connector_data_t *const connector_ptr);
connector_bool_t is_valid_timing_limit(connector_data_t *const connector_ptr, unsigned long const start, unsigned long const limit);
void *get_facility_data(connector_data_t *const connector_ptr, uint16_t const facility_num);
connector_static_buffer_id_t get_facility_buffer_id(uint16_t const facility_num);
connector_status_t add_facility_data(connector_data_t *const connector_ptr, unsigned int const service_index, uint16_t const facility_num, void **fac_ptr, size_t const size);
connector_status_t del_facility_data(connector_data_t *const connector_ptr, uint16_t const facility_num);
connector_status_t notify_status(connector_callback_t const callback, connector_tcp_status_t const status, void *const context);
void edp_get_device_cloud(connector_data_t *const connector_ptr);
connector_status_t get_config_vendor_id(connector_data_t *const connector_ptr);
connector_status_t get_config_device_type(connector_data_t *const connector_ptr);
connector_status_t get_config_keepalive(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request);
connector_status_t get_config_wait_count(connector_data_t *const connector_ptr);
connector_status_t get_config_ip_addr(connector_data_t *const connector_ptr);
connector_status_t get_config_identity_verification(connector_data_t *const connector_ptr);
connector_status_t get_config_password(connector_data_t *const connector_ptr);
connector_status_t tcp_initiate_send_packet(connector_data_t *const connector_ptr, uint8_t *const edp_header, size_t const length, uint16_t const type, send_complete_cb_t send_complete_cb, void *const user_data);
connector_status_t tcp_initiate_send_facility_packet(connector_data_t *const connector_ptr, uint8_t *const edp_header, size_t const length, uint16_t const facility, send_complete_cb_t send_complete_cb, void *const user_data);
connector_callback_status_t tcp_send_buffer(connector_data_t *const connector_ptr, uint8_t *const buffer, size_t *const length);
connector_status_t tcp_release_packet_buffer(connector_data_t *const connector_ptr, uint8_t const *const packet, connector_status_t const status, void *const user_data);
uint8_t *tcp_get_packet_buffer(connector_data_t *const connector_ptr, uint16_t const facility, uint8_t **data_ptr, size_t *data_length);
connector_status_t tcp_rx_keepalive_process(connector_data_t *const connector_ptr);
connector_status_t tcp_send_complete_callback(connector_data_t *const connector_ptr, connector_status_t status);
connector_status_t edp_tcp_send_process(connector_data_t *const connector_ptr);
connector_buffer_t *tcp_new_receive_packet(connector_data_t *const connector_ptr);
void tcp_release_receive_packet(connector_data_t *const connector_ptr, connector_buffer_t const *const packet);
connector_callback_status_t tcp_receive_buffer(connector_data_t *const connector_ptr, uint8_t *const buffer, size_t *const length);
connector_callback_status_t tcp_receive_data_status(connector_data_t *const connector_ptr);
connector_status_t tcp_receive_packet(connector_data_t *const connector_ptr, connector_buffer_t **packet);
connector_status_t edp_tcp_receive_process(connector_data_t *connector_ptr);
connector_status_t connect_to_cloud(connector_data_t *const connector_ptr, char const *cloud_url);
connector_status_t send_version(connector_data_t *connector_ptr, uint16_t const type, uint32_t const version);
connector_status_t receive_edp_version(connector_data_t *const connector_ptr);
size_t build_keepalive_param(uint8_t *const edp_header, uint16_t const type, uint16_t const value);
connector_status_t send_keepalive(connector_data_t *const connector_ptr);
connector_status_t receive_protocol_version(connector_data_t *const connector_ptr);
connector_status_t send_identity_verification(connector_data_t *const connector_ptr);
connector_status_t send_provisioning(connector_data_t *const connector_ptr);
connector_status_t send_device_id(connector_data_t *const connector_ptr);
connector_status_t receive_device_id(connector_data_t *const connector_ptr);
connector_status_t send_cloud_url(connector_data_t *const connector_ptr);
connector_status_t send_password(connector_data_t *const connector_ptr);
connector_status_t send_vendor_id(connector_data_t *const connector_ptr);
connector_status_t send_device_type(connector_data_t *const connector_ptr);
connector_status_t send_complete(connector_data_t *const connector_ptr);
connector_status_t edp_tcp_open_process(connector_data_t *const connector_ptr);
connector_status_t tcp_close_cloud(connector_data_t *const connector_ptr);
connector_status_t edp_close_process(connector_data_t *const connector_ptr);
void cc_init(connector_cc_data_t *const cc_ptr);
connector_status_t edp_send_redirect_report(connector_data_t *const connector_ptr, connector_cc_data_t *const cc_ptr);
void build_ip_addr(connector_data_t *const connector_ptr, uint8_t *ipv6_addr);
connector_status_t send_connection_report(connector_data_t *const connector_ptr, connector_cc_data_t *const cc_ptr);
connector_status_t cc_process(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const packet, unsigned int *const receive_timeout);
connector_status_t cc_discovery(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const packet, unsigned int *receive_timeout);
connector_status_t connector_facility_cc_cleanup(connector_data_t *const connector_ptr);
connector_status_t connector_facility_cc_delete(connector_data_t *const connector_ptr);
connector_status_t connector_facility_cc_init(connector_data_t *const connector_ptr, unsigned int const facility_index);
connector_status_t edp_redirect_process(connector_data_t *const connector_ptr);
msg_session_t *msg_find_session(connector_msg_data_t const *const msg_ptr, unsigned int const id, connector_bool_t const client_owned);
void msg_set_error(msg_session_t *const session, connector_session_error_t const error_code);
connector_status_t msg_call_service_layer(connector_data_t *const connector_ptr, msg_session_t *const session, msg_service_type_t const type);
connector_status_t msg_inform_error(connector_data_t *const connector_ptr, msg_session_t *const session, connector_session_error_t error_code);
msg_session_t *msg_create_session(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, unsigned int const service_id, connector_bool_t const client_owned, connector_status_t *const status);
connector_status_t msg_delete_session(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, msg_session_t *const session);
void msg_default_data_block(msg_data_block_t *dblock, uint32_t const window_size);
connector_session_error_t msg_initialize_data_block(msg_session_t *const session, uint32_t const window_size, msg_block_state_t state);
connector_status_t msg_send_error(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, msg_session_t *const session, uint16_t const session_id, connector_session_error_t const error_value, uint8_t const flag);
connector_status_t msg_send_capabilities(connector_data_t *const connector_ptr, connector_msg_data_t const *const msg_ptr, uint8_t const flag);
void msg_fill_msg_header(msg_session_t *const session, void *ptr);
connector_status_t msg_send_complete(connector_data_t *const connector_ptr, uint8_t const *const packet, connector_status_t const status, void *const user_data);
connector_status_t msg_send_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_compress_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_prepare_send_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_process_send_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_get_service_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_bool_t msg_initiate_request(connector_data_t *const connector_ptr, void const *const service_context);
connector_status_t msg_handle_pending_request(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, msg_session_t *const session, connector_session_error_t const result);
connector_status_t msg_start_session(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr);
connector_status_t msg_send_ack(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, msg_session_t *const session);
connector_status_t msg_process_capabilities(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_fac, uint8_t *const ptr);
connector_status_t msg_pass_service_data(connector_data_t *const connector_ptr, msg_session_t *const session, void *data, size_t const bytes);
connector_status_t msg_process_decompressed_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_decompress_data(connector_data_t *const connector_ptr, msg_session_t *const session);
connector_status_t msg_process_compressed_data(connector_data_t *const connector_ptr, msg_session_t *const session, uint8_t *data, size_t const bytes);
connector_status_t msg_process_service_data(connector_data_t *const connector_ptr, msg_session_t *const session, uint8_t *msg_data, size_t const frame_bytes, size_t const header_bytes, unsigned const flag);
connector_status_t msg_process_start(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, uint8_t *ptr, uint16_t const length);
connector_status_t msg_process_data(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, uint8_t *ptr, uint16_t const length);
connector_status_t msg_process_ack(connector_msg_data_t *const msg_fac, uint8_t const *ptr);
connector_status_t msg_process_error(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_fac, uint8_t *const ptr);
connector_status_t msg_discovery(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const packet, unsigned int *const receive_timeout);
void msg_switch_session(connector_msg_data_t *const msg_ptr, msg_session_t *const session);
connector_status_t msg_process_pending(connector_data_t *const connector_ptr, connector_msg_data_t *const msg_ptr, unsigned int *const receive_timeout);
connector_status_t msg_process(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const edp_header, unsigned int *const receive_timeout);
connector_status_t msg_cleanup_all_sessions(connector_data_t *const connector_ptr, uint16_t const service_id);
connector_status_t msg_delete_facility(connector_data_t *const connector_ptr, uint16_t const service_id);
connector_status_t msg_init_facility(connector_data_t *const connector_ptr, unsigned int const facility_index, uint16_t service_id, connector_msg_callback_t callback);
uint32_t encode_element_id(unsigned int const id);
uint32_t encode_group_id(unsigned int const group_id);
void rci_set_buffer(rci_buffer_t *const dst, rci_service_buffer_t const *const src);
size_t rci_buffer_remaining(rci_buffer_t const *const buffer);
size_t rci_buffer_used(rci_buffer_t const *const buffer);
uint8_t *rci_buffer_position(rci_buffer_t const *const buffer);
void rci_buffer_advance(rci_buffer_t *const buffer, size_t const amount);
uint8_t rci_buffer_read(rci_buffer_t const *const buffer);
connector_bool_t ptr_in_range(void const *const pointer, void const *const start, void const *const end);
connector_bool_t ptr_in_buffer(uint8_t const *const pointer, rci_buffer_t const *const buffer);
void clear_rcistr(rcistr_t *const string);
connector_bool_t rcistr_valid(rcistr_t const *const string);
void adjust_char_pointer(uint8_t *const new_base, uint8_t const *const old_base, uint8_t **const pointer);
void adjust_rcistr(uint8_t *const new_base, uint8_t const *const old_base, rcistr_t *const string);
connector_bool_t is_set_command(connector_remote_action_t const action);
void rci_error(rci_t *const rci, unsigned int const id, char const *const description, char const *const hint);
void rci_global_error(rci_t *const rci, unsigned int const id, char const *const hint);
void rci_group_error(rci_t *const rci, unsigned int const id, char const *const hint);
connector_bool_t pending_rci_callback(rci_t *const rci);
void trigger_rci_callback(rci_t *const rci, connector_request_id_remote_config_t const remote_config_request);
connector_bool_t rci_callback(rci_t *const rci);
void rci_set_output_error(rci_t *const rci, unsigned int const id, char const *const hint, rci_output_state_t state);
connector_bool_t rci_output_data(rci_t *const rci, rci_buffer_t *const output, uint8_t const *const data, size_t const bytes);
size_t get_bytes_followed(uint32_t value);
connector_bool_t rci_output_uint32(rci_t *const rci, uint32_t const value);
connector_bool_t rci_output_string(rci_t *const rci, char const *const string, size_t const length);
connector_bool_t rci_output_ipv4(rci_t *const rci, char const *const string);
connector_bool_t rci_output_uint8(rci_t *const rci, uint8_t const value);
connector_bool_t rci_output_float(rci_t *const rci, float const value);
void rci_output_command_id(rci_t *const rci);
void rci_output_group_id(rci_t *const rci);
connector_bool_t encode_attribute(rci_t *const rci, unsigned int const index);
void rci_output_group_attribute(rci_t *const rci);
void rci_output_field_id(rci_t *const rci);
void rci_output_field_value(rci_t *const rci);
void rci_output_field_terminator(rci_t *const rci);
void rci_output_group_terminator(rci_t *const rci);
void rci_generate_output(rci_t *const rci);
connector_bool_t destination_in_storage(rci_t const *const rci);
size_t get_bytes_to_follow(uint8_t opcode);
void reset_input_content(rci_t *const rci);
size_t get_modifier_ber(rci_t *const rci, uint32_t *const value);
connector_bool_t get_uint32(rci_t *const rci, uint32_t *const value);
connector_bool_t get_float(rci_t *const rci, float *const value);
connector_bool_t get_string(rci_t *const rci, char const **string, size_t *const length);
connector_bool_t get_ip_address(rci_t *const rci, uint32_t *const ip_addr, size_t const length);
connector_bool_t decode_attribute(rci_t *const rci, unsigned int *index);
connector_bool_t has_rci_atribute(unsigned int data);
connector_bool_t has_rci_error(rci_t *const rci, unsigned int data);
connector_bool_t has_rci_terminated(unsigned int data);
connector_bool_t has_rci_no_value(unsigned int data);
void process_rci_command(rci_t *const rci);
void process_command_attribute(rci_t *const rci);
void process_group_id(rci_t *const rci);
void process_group_attribute(rci_t *const rci);
void process_field_id(rci_t *const rci);
void process_field_type(rci_t *const rci);
void process_field_value(rci_t *const rci);
void process_field_no_value(rci_t *const rci);
void rci_parse_input(rci_t *const rci);
void traverse_rci_command(rci_t *const rci);
void traverse_group_id(rci_t *const rci);
void traverse_element_id(rci_t *const rci);
void traverse_element_end(rci_t *const rci);
void traverse_group_end(rci_t *const rci);
connector_bool_t traverse_all_elements(rci_t *const rci);
connector_bool_t traverse_all_group_instances(rci_t *const rci);
connector_bool_t traverse_all_groups(rci_t *const rci);
void rci_traverse_data(rci_t *const rci);
void rci_output_error_id(rci_t *const rci);
void rci_output_error_description(rci_t *const rci);
void rci_output_error_hint(rci_t *const rci);
void rci_generate_error(rci_t *const rci);
connector_bool_t rci_action_session_start(rci_t *const rci, rci_service_data_t *service_data);
connector_bool_t rci_action_session_active(rci_t *const rci);
connector_bool_t rci_action_session_lost(rci_t *const rci);
rci_status_t rci_binary(rci_session_t const action, rci_service_data_t *service_data);
uint32_t rci_get_firmware_target_zero_version(void);
void set_rci_service_error(msg_service_request_t *const service_request, connector_session_error_t const error_code);
connector_status_t rci_service_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t connector_facility_rci_service_cleanup(connector_data_t *const connector_ptr);
connector_status_t connector_facility_rci_service_delete(connector_data_t *const connector_ptr);
connector_status_t connector_facility_rci_service_init(connector_data_t *const connector_ptr, unsigned int const facility_index);
void set_data_service_error(msg_service_request_t *const service_request, connector_session_error_t const error_code);
connector_status_t call_ds_receive_callback(connector_data_t *const connector_ptr, data_service_context_t *const data_service, void *const data);
connector_status_t process_ds_receive_target(connector_data_t *const connector_ptr, data_service_context_t *const data_service, uint8_t const *const data, size_t *const data_length);
connector_status_t process_ds_receive_data(connector_data_t *const connector_ptr, data_service_context_t *const data_service, uint8_t const *const data, size_t const data_length, unsigned int const flags);
connector_status_t process_data_service_device_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t process_data_service_device_response(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t process_data_service_device_error(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t data_service_device_request_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
size_t fill_put_request_header(connector_request_data_service_send_t const *const request, uint8_t *const data);
connector_status_t call_put_request_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, connector_request_id_data_service_t const request_id, void *const cb_data);
connector_status_t process_send_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, data_service_context_t *const ds_ptr);
connector_status_t process_send_response(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, data_service_context_t *const ds_ptr);
connector_status_t process_send_error(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, void *const cb_context);
connector_status_t data_service_put_request_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t data_service_put_request_init(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t data_service_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t connector_facility_data_service_cleanup(connector_data_t *const connector_ptr);
connector_status_t connector_facility_data_service_delete(connector_data_t *const data_ptr);
connector_status_t connector_facility_data_service_init(connector_data_t *const data_ptr, unsigned int const facility_index);
connector_status_t data_service_initiate(connector_data_t *const connector_ptr, void const *request);
void fs_set_service_error(msg_service_request_t *const service_request, connector_session_error_t const session_error);
connector_status_t fs_set_abort(connector_data_t *const connector_ptr, fs_context_t *const context, connector_request_id_file_system_t const file_request, connector_status_t const error_status);
void fs_get_internal_error_data(connector_file_system_get_error_t *const data);
connector_status_t format_file_error_msg(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t fs_call_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, connector_request_id_file_system_t const fs_request_id, void *const pdata);
size_t file_hash_size(connector_file_system_hash_algorithm_t const hash_alg);
connector_status_t call_file_stat_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char const *const path, connector_file_system_hash_algorithm_t const hash_alg);
connector_status_t call_file_stat_dir_entry_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char const *const path);
connector_status_t call_file_opendir_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char const *const path);
int strnlen_(char const *const string, int maxlen);
connector_status_t call_file_readdir_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char *const path, size_t const buffer_size);
connector_status_t call_file_close_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, connector_request_id_file_system_t const fs_request_id);
connector_status_t call_file_hash_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char const *const path, uint8_t *const hash_ptr);
connector_status_t call_file_open_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *context, char const *const path, int const oflag);
connector_status_t call_file_lseek_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, connector_file_offset_t const offset_in, connector_file_system_seek_origin_t const origin, connector_file_offset_t *const offset_out);
connector_status_t call_file_ftruncate_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t call_file_rm_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, char const *const path);
connector_status_t call_file_read_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, void *const buffer, size_t *const buffer_size);
connector_status_t call_file_write_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, void const *const buffer, size_t *const bytes_done);
size_t parse_file_path(fs_context_t *const context, void const *const path_ptr, size_t const buffer_size);
size_t parse_file_get_header(fs_context_t *const context, uint8_t const *const header_ptr, size_t const buffer_size);
connector_status_t process_file_get_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t set_file_position(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t process_get_close(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, connector_request_id_file_system_t close_request);
connector_status_t process_file_get_response(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t process_file_rm_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t process_file_response_nodata(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context, fs_opcode_t const opcode);
size_t parse_file_put_header(fs_context_t *const context, uint8_t const *const header_ptr, size_t const buffer_size);
connector_status_t process_file_put_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
size_t parse_file_ls_header(fs_context_t *const context, uint8_t const *const header_ptr, size_t const buffer_size);
size_t format_file_ls_response_header(connector_file_system_hash_algorithm_t const hash_alg, size_t const hash_size, uint8_t *const data_ptr);
size_t file_ls_resp_header_size(void);
size_t format_file_ls_response(fs_context_t const *context, char const *path, size_t const path_len, uint8_t *const data_ptr);
connector_status_t file_store_path(fs_context_t *const context, char const *const path);
connector_status_t process_file_ls_request(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t process_file_ls_response(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t allocate_file_context(connector_data_t *const connector_ptr, fs_opcode_t const opcode, fs_context_t **const result);
connector_status_t file_system_request_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t file_system_response_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t file_system_free_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t call_session_error_user(connector_data_t *const connector_ptr, msg_service_request_t *const service_request, fs_context_t *const context);
connector_status_t file_system_session_error_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t file_system_callback(connector_data_t *const connector_ptr, msg_service_request_t *const service_request);
connector_status_t connector_facility_file_system_cleanup(connector_data_t *const connector_ptr);
connector_status_t connector_facility_file_system_delete(connector_data_t *const data_ptr);
connector_status_t connector_facility_file_system_init(connector_data_t *const data_ptr, unsigned int const facility_index);
connector_status_t confirm_fw_version(connector_firmware_data_t *const fw_ptr, uint8_t target_number, connector_firmware_version_t const version);
connector_status_t get_fw_config(connector_firmware_data_t *const fw_ptr, connector_request_id_firmware_t const fw_request_id, void *const data);
fw_abort_status_t get_abort_status_code(connector_firmware_status_t const status);
connector_status_t send_fw_message(connector_firmware_data_t *const fw_ptr);
connector_status_t send_fw_abort(connector_firmware_data_t *const fw_ptr, uint8_t const target, uint8_t const msg_opcode, fw_abort_status_t const abort_status);
connector_status_t process_fw_download_request(connector_firmware_data_t *const fw_ptr, uint8_t *fw_download_request, uint16_t const length);
connector_status_t process_fw_binary_block(connector_firmware_data_t *const fw_ptr, uint8_t *const fw_binary_block, uint16_t const length);
connector_status_t process_fw_abort(connector_firmware_data_t *const fw_ptr, uint8_t *const fw_abort, uint16_t const length);
connector_status_t process_fw_complete(connector_firmware_data_t *const fw_ptr, uint8_t *const fw_complete_request, uint16_t const length);
connector_status_t process_target_reset(connector_firmware_data_t *const fw_ptr, uint8_t *const fw_message, uint16_t const length);
connector_status_t send_discovery_packet_callback(connector_data_t *const connector_ptr, uint8_t const *const packet, connector_status_t const send_status, void *const user_data);
connector_status_t fw_discovery(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const packet, unsigned int *receive_timeout);
connector_status_t fw_process(connector_data_t *const connector_ptr, void *const facility_data, uint8_t *const edp_header, unsigned int *const receive_timeout);
connector_status_t connector_facility_firmware_delete(connector_data_t *const connector_ptr);
connector_status_t connector_facility_firmware_init(connector_data_t *const connector_ptr, unsigned int const facility_index);
connector_status_t layer_remove_facilities(connector_data_t *const connector_ptr, connector_supported_facility_cb_index_t cb_index);
connector_status_t layer_discovery_facility(connector_data_t *const connector_ptr);
connector_status_t edp_layer_get_supported_facilities(connector_data_t *const connector_ptr);
connector_status_t edp_layer_initialize_facilities(connector_data_t *const connector_ptr);
connector_status_t layer_facility_process(connector_data_t *const connector_ptr);
connector_status_t edp_config_init(connector_data_t *const connector_ptr);
connector_status_t connector_edp_init(connector_data_t *const connector_ptr);
connector_status_t connector_edp_step(connector_data_t *const connector_ptr);
connector_status_t edp_initiate_action(connector_data_t *const connector_ptr, connector_initiate_request_t const request, void const *const request_data);
uint16_t sm_calculate_crc16(uint16_t crc, uint8_t const *const data, size_t const bytes);
int sm_encode85(uint8_t *dest, size_t dest_len, uint8_t const *const src, size_t const src_len);
int sm_decode85(uint8_t *dest, size_t dest_len, uint8_t const *const src, size_t const src_len);
connector_status_t sm_copy_user_request(connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
void sm_verify_result(connector_sm_data_t *const sm_ptr, connector_status_t *const result);
size_t sm_get_max_payload_bytes(connector_sm_data_t *const sm_ptr);
connector_status_t sm_allocate_user_buffer(connector_data_t *const connector_ptr, sm_data_block_t *const dblock);
connector_status_t sm_map_callback_status_to_connector_status(connector_callback_status_t const callback_status);
connector_callback_status_t sm_inform_data_complete(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_callback_status_t sm_inform_ping_complete(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_inform_session_complete(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_switch_path(connector_data_t *const connector_ptr, connector_sm_session_t *const session, connector_sm_state_t const next_state);
void sm_set_payload_process(connector_sm_session_t *const session);
void sm_set_payload_complete(connector_sm_session_t *const session);
void sm_set_header_complete(connector_sm_session_t *const session);
connector_status_t sm_prepare_data_request(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_prepare_data_response(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_process_config_request(connector_data_t *const connector_ptr, connector_sm_session_t *const session, void *const payload, size_t const bytes);
connector_status_t sm_pass_target_info(connector_data_t *const connector_ptr, connector_sm_session_t *const session, uint8_t *const target_ptr, size_t target_bytes);
connector_status_t sm_process_data_request(connector_data_t *const connector_ptr, connector_sm_session_t *const session, void *const payload, size_t const bytes);
connector_status_t sm_process_data_response(connector_data_t *const connector_ptr, connector_sm_session_t *const session, void *const payload, size_t const bytes);
connector_status_t sm_process_reboot(connector_data_t *const connector_ptr);
connector_status_t sm_process_ping_response(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_process_ping_request(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_process_opaque_response(connector_data_t *const connector_ptr, connector_sm_session_t *const session, void *payload, size_t const bytes);
connector_status_t sm_prepare_payload(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_pass_user_data(connector_data_t *const connector_ptr, connector_sm_session_t *const session, uint8_t *payload, size_t const bytes);
connector_status_t sm_process_payload(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_get_request_id(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_sm_session_t *get_sm_session(connector_sm_data_t *const sm_ptr, uint32_t const transcation_id, connector_bool_t const client_originated);
connector_sm_session_t *sm_create_session(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_bool_t const client_originated);
connector_status_t sm_delete_session(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_cancel_session(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, uint32_t const *const request_id);
connector_status_t sm_process_pending_data(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_get_user_data_length(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_get_more_request_data(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_get_more_response_data(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_compress_data(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_prepare_segment(connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_send_segment(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_encode_segment(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_send_data(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_process_send_path(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_decode_segment(connector_data_t *const connector_ptr, connector_sm_packet_t *const recv_ptr);
connector_status_t sm_verify_sms_preamble(connector_sm_data_t *const sm_ptr);
connector_status_t sm_verify_udp_header(connector_sm_data_t *const sm_ptr);
connector_status_t sm_more_data_callback(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_process_header(connector_sm_packet_t *const recv_ptr, sm_header_t *const header);
connector_status_t sm_update_session(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, sm_header_t *const header, size_t const payload_bytes);
connector_status_t sm_process_packet(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_receive_data(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_decompress_data(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_handle_error(connector_data_t *const connector_ptr, connector_sm_session_t *const session);
connector_status_t sm_handle_complete(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_status_t sm_process_recv_path(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr, connector_sm_session_t *const session);
connector_sm_data_t *get_sm_data(connector_data_t *const connector_ptr, connector_transport_t const transport);
connector_status_t get_config_sm_max_sessions(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request_id, connector_config_sm_max_sessions_t *const config_max_sessions);
connector_status_t get_config_sm_max_rx_segments(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request_id, connector_config_sm_max_rx_segments_t *const config_max_rx_segments);
connector_status_t get_config_sm_rx_timeout(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request_id, connector_config_sm_rx_timeout_t *const config_rx_timeout);
connector_status_t sm_initialize(connector_data_t *const connector_ptr, connector_transport_t const transport);
uint32_t *get_request_id_ptr(connector_initiate_request_t const request, void const *const request_data);
connector_status_t sm_initiate_action(void *const handle, connector_initiate_request_t const request, void const *const request_data);
void sm_init_network_packet(connector_sm_packet_t *const packet, void *const ptr);
connector_status_t sm_open_transport(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_close_transport(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t sm_state_machine(connector_data_t *const connector_ptr, connector_sm_data_t *const sm_ptr);
connector_status_t connector_udp_step(connector_data_t *const connector_ptr);
connector_status_t connector_sms_step(connector_data_t *const connector_ptr);
connector_status_t get_config_connect_status(connector_data_t *const connector_ptr, connector_request_id_config_t const config_request_id, connector_config_connect_type_t *const config_connect);
connector_status_t get_wan_device_id(connector_data_t *const connector_ptr, uint8_t *const device_id, connector_request_id_config_t config_request);
connector_status_t manage_device_id(connector_data_t *const connector_ptr);
connector_status_t connector_stop_callback(connector_data_t *const connector_ptr, connector_transport_t const transport, void *const user_context);
connector_bool_t is_connector_stopped(connector_data_t *const connector_ptr, connector_close_status_t const close_status);
void abort_connector(connector_data_t *const connector_ptr);

#if 0
void *connector_init(connector_callback_t const callback, void *const context);
connector_status_t connector_step(void *const handle);
connector_status_t connector_run(void *const handle);
connector_status_t connector_initiate_action(void *const handle, connector_initiate_request_t const request, void const *const request_data);
#endif
