package com.digi.config.command_tool;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class CommandTool {

	public final static String VERSION = "1.0.0.0";
	public final static String HELP_OPTION = "help";
	public final static String S_HELP_OPTION = "h";
	public final static String VERBOSE_OPTION = "v";
	public final static String OUTPUT_DIRECTORY_OPTION = "o";
	public final static String PLATFORM_FILE_OPTION = "p";
	public final static String RCI_JAR_OPTION = "rcipath";
	public final static String RCI_JAR_OUTPUT_OPTION = "rcioutpath";
	
	
	private final static String DASH = "-";

	private static String command_filename;
//	private static String platform_filename;
//	private static String output_path;
	private static boolean verbose;
	private static List<GeneratorInterface> generators;
	private static List<String> generatorOptions;
	private static List<ConfigOption> options;

	private static void initialOptions() {
		
		ConfigOption option = new ConfigOption(OUTPUT_DIRECTORY_OPTION, "<directory path>", "Optional directory path where the generated files will be created");
		option.toDirectoryOption();
		options.add(option);
		
		option = new ConfigOption(PLATFORM_FILE_OPTION, "<platform file>", "Platform file that defines feature capabilities and number of instances of a table");
		options.add(option);
		
		
		option = new ConfigOption(VERBOSE_OPTION, null, "Otional output messages about what the tool is doing");
		options.add(option);
		
		option = new ConfigOption(HELP_OPTION, null, "Show this message");
		options.add(option);
		
		option = new ConfigOption(S_HELP_OPTION, null, "Show this message");
		options.add(option);

		option = new ConfigOption(RCI_JAR_OPTION, "<path>", "ConfigGenerator.jar tool path");
		option.toDirectoryOption();
		options.add(option);

		option = new ConfigOption(RCI_JAR_OUTPUT_OPTION, "<path>", "Path where the files generated by ConfigGenerator.jar will be");
		option.toDirectoryOption();
		options.add(option);
		
	}
	private static void usage() {
		String className = CommandTool.class.getName();

		int firstChar = className.lastIndexOf(".") + 1;
		if (firstChar != -1) {
			className = className.substring(firstChar);
		}

		String syntax = String.format("\nUsage: java -jar %s.jar ", className);

		for (ConfigOption option: options) {
			syntax += " ["
					+ DASH
					+ option.getOption()
					+ "]";
		}
		
		for (GeneratorInterface generator: generators) {
			syntax += " ["
					+ DASH
					+ generator.getOption()
					+ "]";
		}
		
		syntax += " <Command Definition Syntax file name>";
		
		log(syntax);

		log("\nDescription:");
		log("\tIt generates files for all management subsystems.");

		log("Options:");
		
		for (ConfigOption option: options) {
			if (option.getArgument() != null)
				syntax = String.format("\t%-20s ", DASH + option.getOption() + "=" + option.getArgument());
			else
				syntax = String.format("\t%-20s ", DASH + option.getOption());
			
			if (option.getDescription() != null)
				syntax += String.format("\t= %s", option.getDescription());
			log(syntax);
		}
		

		for (GeneratorInterface generator: generators) {
			log(String
					.format(
							"\t%-20s \t= optional to run %s.",
							DASH + generator.getOption(), generator.getName()));
		}
		
		System.exit(1);
	}

	private static void toOption(String arg) {

		/* split the [option]=[option value] */
		try {


			if (arg.equals(VERBOSE_OPTION)) {
				verbose = true;
			} else if (arg.equals(HELP_OPTION) || arg.equals(S_HELP_OPTION)) {
				usage();
			} else if (arg.length() == 0) {
				throw new Exception("Missing Option!");
			} else {
				boolean optionOk = false;
				
				String[] keys = arg.split("=", 2);
				
				for (GeneratorInterface generator: generators) {
					if (arg.equals(generator.getOption())) {
						generatorOptions.add(generator.getOption());
						optionOk = true;
						break;
					}
					else if (generator.setGeneratorOption(arg)) {
						optionOk = true;
						break;
					}
				}
				
				if (!optionOk) {
					boolean found = false;
					if (keys.length == 2) {
						for (ConfigOption option: options) {
							if (option.getOption().equals(keys[0])) {
								option.setValue(keys[1]);
								found = true;
								break;
							}
						}
						
					}
					
					if (!found)
						throw new Exception("Invalid Option: " + arg);
						
				}
			}
		} catch (Exception e) {
			log(e.getMessage());
			usage();
			System.exit(1);
		}

	}

	private void toArgument(int index, String arg) {
		switch (index) {
		case 1:
			command_filename = arg;
			break;
		default:
			log("Extra argument is given!");
			usage();
			break;
		}
	}
		
	public static void log(Object aObject) {
		System.out.println(String.valueOf(aObject));
	}

	public static void debug_log(Object aObject) {
		if (verbose) {
			System.out.println(String.valueOf(aObject));
		}
	}
	
	public static String getCommandFileName() {
		return command_filename;
	}
	
	public static boolean getVerboseOption() {
		return verbose;
	}
	
	public static String getOption(String string) throws IOException {
		for (ConfigOption option: options) {
			if (option.getOption().equals(string)) 
				return option.getValue();
		}
		throw new IOException("Error option: " + string + "option is not found!");
	}
	public CommandTool(String args[]) {

		if ((args == null) || (args.length == 0))
			usage();
		else {
			
			int index = 0;
			for (String arg : args) {
				if (arg.startsWith(DASH)) {
					String str = arg.substring(DASH.length());
					toOption(str);
				} else {
					index++;
					toArgument(index, arg);
				}
			}
			
		}
	}

	public static ConfigurationTag getTag(LinkedList<ConfigurationTag> tags, String name) {
		
		for (ConfigurationTag tag: tags) {
			if (tag.getName().equals(name))
				return tag;
		}
		
		return null;
	}

	public static ConfigurationGroup getGroup(LinkedList<ConfigurationGroup> groups, String name) {
		
		for (ConfigurationGroup group: groups) {
			if (group.getName().equals(name))
				return group;
		}
		
		return null;
	}
	
	public static ConfigurationElement getElement(LinkedList<ConfigurationElement> elements, String name) {

		for (ConfigurationElement element : elements) {
			if (element.getName().equals(name)) 
				return element;
		}
		
		return null;
	}
	
	public static void main(String[] args) {
		
		
		try {
			options = new ArrayList<ConfigOption>();
			
			initialOptions();
			
			generatorOptions = new ArrayList<String>();
			generators = new ArrayList<GeneratorInterface>();
			
			generators.add(new ConfigMgrGenerator());
			generators.add(new DefaultUCIGenerator());
			generators.add(new CloudConnectorGenerator());
			generators.add(new MibGenerator());
			generators.add(new JsonGenerator());
			generators.add(new DocumentGenerator());

			new CommandTool(args);

			/* Create Group list */
			LinkedList<ConfigurationGroup> groupList = new LinkedList<ConfigurationGroup>();
			
			Parser.ParseFile(command_filename, groupList);

			if (groupList.isEmpty())
					throw new IOException("No groups/tables specified in file: "
							+ command_filename);

			
			debug_log("Total of set groups and tables : "
					+ ConfigType.getCount(ConfigType.SET_GROUP));
			debug_log("Total of get groups and tables: "
					+ ConfigType.getCount(ConfigType.GET_GROUP));
			
			debug_log("Total of actions: "
					+ ConfigType.getCount(ConfigType.ACTION));
			
			/* Create Tag list */
			LinkedList<ConfigurationTag> tagList = new LinkedList<ConfigurationTag>();
			
			try {
				Parser.ParsePlatformFile(getOption(PLATFORM_FILE_OPTION), tagList);
			} catch  (Exception e) {
				debug_log(e.getMessage());
				log("Skip Platform file");
			}
			
			String output_path = getOption(OUTPUT_DIRECTORY_OPTION);
			
			for (GeneratorInterface generator: generators) {
				if (generatorOptions.isEmpty() ||  generatorOptions.contains(generator.getOption())) {
					
					if (!generator.GenerateOutputFile(groupList, tagList, output_path)) 
						log("Error is encountered in " + generator.getName());
				}
			}
			
			
			log("\nDone.\n");
			System.exit(0);

		} catch (Exception e) {

			if (e.getMessage() != null) {
				log(e.getMessage());
			}
			
			if (verbose) {
				e.printStackTrace();
				if (e.getCause() != null)
					System.err.println(e.getMessage());
			}
			System.exit(1);
		}
	}

}
