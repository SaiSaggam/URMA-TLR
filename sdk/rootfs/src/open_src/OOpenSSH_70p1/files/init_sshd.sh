#!/bin/ash

#set -e

SSHD="/usr/sbin/sshd"
SSH_KEYGEN="/usr/bin/ssh-keygen"
PID_FILE="/var/run/sshd.pid"

CONFIG_DIR="/etc/ssh"
SSHD_CONFIG="${CONFIG_DIR}/sshd_config"

USER_DIR="/home/digi/user"
KEY_DIR="/home/digi/ssh"
RSA1_KEY="${KEY_DIR}/ssh_host_key"
RSA_KEY="${KEY_DIR}/ssh_host_rsa_key"
DSA_KEY="${KEY_DIR}/ssh_host_dsa_key"
RSA_KEY_PUB="${USER_DIR}/ssh_host_rsa_key.pub"
DSA_KEY_PUB="${USER_DIR}/ssh_host_dsa_key.pub"
# ECDSA_KEY="${KEY_DIR}/ssh_host_ecdsa_key"
# ED25519_KEY="${KEY_DIR}/ssh_host_ed25519_key"

###############################################################################
# Key generation functions
###############################################################################

generate_rsa1_key()
{
	if [ ! -s "${RSA1_KEY}" ]; then
		echo "Generating RSA1 host key..."
		if ${SSH_KEYGEN} -q -t rsa1 -f "${RSA1_KEY}" -C '' -N '' 2>/dev/null; then
			chmod 600 "${RSA1_KEY}"
			chmod 644 "${RSA1_KEY}.pub"
			echo "OK"
		else
			echo "FAILED"
			exit 1
		fi
	fi
}

generate_rsa_key()
{
	if [ ! -s "${RSA_KEY}" ]; then
		echo "Generating RSA host key..."
		if ${SSH_KEYGEN} -q -t rsa -f "${RSA_KEY}" -C '' -N '' 2>/dev/null; then
			chmod 600 "${RSA_KEY}"
			chmod 644 "${RSA_KEY}.pub"
			mv "${RSA_KEY}.pub" "${RSA_KEY_PUB}"
			echo "OK"
		else
			echo "FAILED"
			exit 1
		fi
	fi
}

generate_dsa_key()
{
	if [ ! -s "${DSA_KEY}" ]; then
		echo "Generating DSA host key..."
		if ${SSH_KEYGEN} -q -t dsa -f "${DSA_KEY}" -C '' -N '' 2>/dev/null; then
			chmod 600 "${DSA_KEY}"
			chmod 644 "${DSA_KEY}.pub"
			mv "${DSA_KEY}.pub" "${DSA_KEY_PUB}"
			echo "OK"
		else
			echo "FAILED"
			exit 1
		fi
	fi
}

###############################################################################
# UCI parsing
###############################################################################
print_config_header()
{
	cat > "${SSHD_CONFIG}" <<ENDHEADER
# ${SSHD_CONFIG} - UCI sshd configuration file
#
# This file is automatically generated by the sshd init script from
# configuration information stored in UCI. DO NOT EDIT THIS FILE BY HAND.
#

ENDHEADER
}

print_config_common()
{
	cat >> "${SSHD_CONFIG}" <<ENDCOMMON
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::
Protocol 2
UsePAM yes
HostKey ${RSA_KEY}
HostKey ${DSA_KEY}
LoginGraceTime 2m
PermitRootLogin no
MaxAuthTries 4		# With PAM, this makes max. 3 attempts
MaxSessions 10
PasswordAuthentication yes
UsePrivilegeSeparation sandbox
Banner /usr/etc/ssh/custom_banner
Subsystem sftp /usr/libexec/sftp-server
ENDCOMMON
}

parse_uci_ssh()
{
	# Note, this function should set the ERROR_STATUS, if there was a
	# parsing problem

	local cfg="$1"

	local ssh_enabled

	config_get_bool ssh_enabled $cfg server

	if [ "$ssh_enabled" -eq "1" ]; then
		# Create new config, print header and common config
		print_config_header
		print_config_common

		# Parse port number
		local ssh_port
		config_get ssh_port $cfg port
		echo "Port $ssh_port" >> $SSHD_CONFIG

		# Start sshd
		/usr/sbin/sshd -f "$SSHD_CONFIG"
	fi

	return 0
}

parse_conf_and_start()
{
	# Create config directory, if not exist yet
	[ -d "$CONFIG_DIR" ] || {
		mkdir -p "$CONFIG_DIR"
		chown root:root "$CONFIG_DIR"
		chmod 755 "$CONFIG_DIR"
	}

	# Remove existing SSHD and user allow config files
	[ -f "$SSHD_CONFIG" ] && rm -f "$SSHD_CONFIG"

	. /lib/functions.sh

	# UCI parsing function should set the ERROR_STATUS, if there was a
	# problem with the config parsing
	ERROR_STATUS=0

	# Read and parse configuration. If there's more UCI configs, the config
	# file will be generated from the last one.
	# It also automatically starts an instance when a config file gets
	# generated
	config_load ssh
	config_foreach parse_uci_ssh ssh

	return "$ERROR_STATUS"
}

###############################################################################
# Start and stop functions
###############################################################################
generate_keys()
{
	# Create directory for keys
	mkdir -p "$KEY_DIR"

	# for protocol v1
	#generate_rsa1_key

	# for protocol v2
	generate_rsa_key
	generate_dsa_key
}

regenerate_keys()
{
	# Remove existing keys
	#rm -f "$RSA1_KEY"
	rm -f "$RSA_KEY"
	rm -f "$DSA_KEY"
	rm -f "$RSA_KEY_PUB"
	rm -f "$DSA_KEY_PUB"
	#rm -f "$ECDSA_KEY"
	#rm -f "$ED25519_KEY"

	# And generate them again
	generate_keys
}

start()
{
	# Generate keys
	generate_keys

	# Create config files from UCI configs
	parse_conf_and_start
}

stop()
{
	# Stop sshd
	pkill sshd 2>/dev/null || true
}

###############################################################################
# Start of script
###############################################################################

case "${1}" in
start)
		start
		;;
stop)
		stop
		;;
restart)
		stop
		start
		;;
generate-keys)
		generate_keys
		;;
regenerate-keys)
		regenerate_keys
		;;
*)
		echo "Usage: $0 {start|stop|restart|generate-keys|regenerate-keys}"
		exit 1
		;;
esac
exit $?
