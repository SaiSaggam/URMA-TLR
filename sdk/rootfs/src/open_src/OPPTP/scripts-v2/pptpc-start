#!/bin/sh

if [ -z "$1" ]; then
   echo "you need specified arguements"
   exit 1
fi

if [ -f "/tmp/pptpc-customer" ]; then
   . /tmp/pptpc-customer
elif [ -f "/usr/bin/pptpc-customer" ]; then
   . /usr/bin/pptpc-customer
fi

TUN_IDX="$1"
PPTP_LINKNAME="pptpc-$TUN_IDX"
PIDFILE_PPPD="/var/run/ppp-$PPTP_LINKNAME.pid"
RESET_FILE="/var/run/pptpc-reset-$TUN_IDX"
XFRM_ADD_FILE="/var/run/pptpc-xfrm-add-$TUN_IDX"
XFRM_DEL_FILE="/var/run/pptpc-xfrm-del-$TUN_IDX"
DONT_WANTYPE_UPDATE="/var/run/dont_update_wantype"
#PPP_OPTS="/etc/ppp/options.$PPTP_LINKNAME"
PEERS_DIR="/etc/ppp/peers"
PEERS_FILE="$PEERS_DIR/$PPTP_LINKNAME"
#PAP_FILE="/etc/ppp/pap-secrets"
#CHAP_FILE="/etc/ppp/chap-secrets"
CSID_FILE="/var/csman_changetime"
PPTP_PNSSERVER=""
PPP_PID=""
PPP_IF=""
RIPD_FLAG="1"
DISCONNECT="0"
CONNECTING="1"
CONNECT="2"
DHCP_SRV_LIST="0 1 2"
DISCONNECTING="3"
LOCAL_WAN_STATUS_CONNECT="2"
AUTOBAK_STATUS_3G_CONNECT="2"
FAILOVER_STATUS_CONNECT="1"

# Write PPTP connection infomation (pid, interface name, ip ...) to CSID
log_pptp_info()
{
   PPP_VIRTUAL_IP="`ifconfig $PPP_IF  | grep P-t-P | cut -d ':' -f2 | cut -d ' ' -f1`"
   PPP_REMOTE_IP="`ifconfig $PPP_IF  | grep P-t-P | cut -d ':' -f3 | cut -d ' ' -f1`"

   write_pptpc_cnt_info "$PPP_PID" "$PPP_IF" "$PPP_VIRTUAL_IP" "$PPP_REMOTE_IP" $TUN_IDX
   write_pptpc_cnt_status "$CONNECT" $TUN_IDX
   write_routing_restart_flag "$RIPD_FLAG" $TUN_IDX

   return 1
}

# Setup Route if need
setup_route()
{
   get_pptpc_tunnel_config $TUN_IDX
   cnt_type="$C_PPTP_CLI_CONNECT_TYPE"
   ROUTEING="$C_PPTP_CLI_ROUTE"
   if [ "$ROUTEING" == "" ]; then
      return
   fi

   route_fail="0"
   default_gw=""
   if [ "$ROUTEING" == "0.0.0.0/0" ]; then
      route_fail="1"

      get_failover_config
      enable_3g_autobak="$C_3G_AUTOBAK_ENABLE"
      if [ -n "$enable_3g_autobak" ] && [ "$enable_3g_autobak" != "0" ]; then
         get_failover_cnt_status
         ofdm_gw="$S_FLASHOFDM_IF_GW"
         if [ "$ofdm_gw" != "0.0.0.0" ]; then
            route_fail="0"
            default_gw="$ofdm_gw"
         fi

         get_3g_cnt_info
         _3g_gw="$S_3G_IF_GW"
         if [ -z "$_3g_gw" ] || [ "$_3g_gw" == "0.0.0.0" ]; then
            for i in $WAN_LIST
            do
               get_3g_cnt_info $i
               _3g_gw="$S_3G_IF_GW"
               [ -n "$_3g_gw" ] && [ "$_3g_gw" != "0.0.0.0" ] && break
            done
         fi

         if [ "$_3g_gw" != "0.0.0.0" ]; then
            route_fail="0"
            default_gw="$_3g_gw"
         fi
      fi

      # IF Not in failover
      if [ "$default_gw" == "" ]; then
         get_local_cnt_info
         default_gw="$S_LOCAL_WAN_GW"
         if [ -z "$default_gw" ] || [ "$default_gw" == "0.0.0.0" ]; then
            for i in $WAN_LIST
            do
               get_local_cnt_info $i
               default_gw="$S_LOCAL_WAN_GW"
               [ -n "$default_gw" ] && [ "$default_gw" != "0.0.0.0" ] && break
            done
         fi
         if [ "$default_gw" != "0.0.0.0" ]; then
            route_fail="0"
         fi
      fi

      echo "route add -host $PPTP_PNSSERVER gw $default_gw"
      route add -host $PPTP_PNSSERVER gw $default_gw
      echo "route delete -host $PPTP_PNSSERVER gw $default_gw >/dev/null 2>&1" >> $RESET_FILE
   fi

   if [ "$route_fail" == "0" ]; then
      echo "route add -net $ROUTEING dev $PPP_IF"
      route add -net $ROUTEING dev $PPP_IF
      echo "route delete -net $ROUTEING dev $PPP_IF >/dev/null 2>&1" >> $RESET_FILE
   else
      echo "ROUTING ERROR: can't route to PPTP Server"
   fi
}

# Setup iptables rules if need
setup_iptables()
{
   get_pptpc_tunnel_config $TUN_IDX
   is_nat="$C_PPTP_CLI_NAT"
   if [ -n "$is_nat" ] && [ "$is_nat" != "0" ]; then
      get_lan_range lan_ip lan_mask
      echo "iptables -t nat -A POSTROUTING -s $lan_ip/$lan_mask -o $PPP_IF -j MASQUERADE"
      iptables -t nat -A POSTROUTING -s $lan_ip/$lan_mask -o $PPP_IF -j MASQUERADE
      echo "iptables -t nat -D POSTROUTING -s $lan_ip/$lan_mask -o $PPP_IF -j MASQUERADE >/dev/null 2>&1 " >> $RESET_FILE
      for i in $DHCP_SRV_LIST
      do
          csid=`printf "0x0093001%01X" $i`
          vlan_enable=`rdcsman $csid u32`
          if [ "$vlan_enable" == "1" ]; then
		     csid=`printf " 0x009300d%01X" $i`
		     vlan_ip=`rdcsman $csid ipv4`
		     csid=`printf " 0x0093012%01X" $i`
		     vlan_netmask=`rdcsman $csid ipv4`
		     if [ "$vlan_ip" != "0.0.0.0" ] || [ "$vlan_netmask" != "0.0.0.0" ]; then
                echo "iptables -t nat -A POSTROUTING -s $vlan_ip/$vlan_netmask -o $PPP_IF -j MASQUERADE"
                iptables -t nat -A POSTROUTING -s $vlan_ip/$vlan_netmask -o $PPP_IF -j MASQUERADE
                echo "iptables -t nat -D POSTROUTING -s $vlan_ip/$vlan_netmask -o $PPP_IF -j MASQUERADE >/dev/null 2>&1 " >> $RESET_FILE
             fi
          fi
      done
   fi

   #echo "iptables -I block_http -o $PPP_IF -j ACCEPT"
   #iptables -I block_http -o $PPP_IF -j ACCEPT
   #echo "iptables -D block_http -o $PPP_IF -j ACCEPT" >> $RESET_FILE
}

# Generate PPTP Client's secret file in /etc/ppp/...
#gen_secret_file()
#{
#   addr=`get_csid_addr $CSID_C_PPTP_CLI_USER $TUN_IDX`
#   account="`rdcsman $addr str`"
#
#   addr=`get_csid_addr $CSID_C_PPTP_CLI_PASSWORD $TUN_IDX`
#   passwd="`rdcsman $addr str`"
#   echo "$account * $passwd *" > $PAP_FILE.pptpc-$TUN_IDX
#   echo "$account * $passwd *" > $CHAP_FILE.pptpc-$TUN_IDX
#
#   [ -f $PAP_FILE  ] && mv $PAP_FILE $PAP_FILE.orig
#   [ -f $CHAP_FILE ] && mv $CHAP_FILE $CHAP_FILE.orig
#   mv $PAP_FILE.pptpc-$TUN_IDX $PAP_FILE
#   mv $CHAP_FILE.pptpc-$TUN_IDX $CHAP_FILE
#}

# Restore from PPTP Client's secret to original secret file
#restore_secret_file()
#{
#   [ -f $PAP_FILE.orig  ] && mv $PAP_FILE.orig $PAP_FILE
#   [ -f $CHAP_FILE.orig ] && mv $CHAP_FILE.orig $CHAP_FILE
#}

# The parameter of
#gen_peers_file()
#{
#   if [ ! -d $PEERS_DIR ]; then
#      mkdir -p $PEERS_DIR
#   fi
#
#   rm -f $PEERS_FILE > /dev/null 2>&1
#   addr=`get_csid_addr $CSID_C_PPTP_CLI_MPPE $TUN_IDX`
#   used_mppe=`rdcsman $addr u8`
#   if [ "$used_mppe" = "1" ]; then
#      echo "pty \"pptp $PPTP_PNSSERVER --nolaunchpppd --loglevel 0\"" >> $PEERS_FILE
#   else
#      echo "pty \"pptp $PPTP_PNSSERVER --nolaunchpppd --loglevel 0 --sync\"" >> $PEERS_FILE
#   fi
#
#   addr=`get_csid_addr $CSID_C_PPTP_CLI_USER $TUN_IDX`
#   account="`rdcsman $addr str`"
#   echo "name $account"            >> $PEERS_FILE
#
#   echo "file $PPP_OPTS"           >> $PEERS_FILE
#   echo "ipparam pptpc-$TUN_IDX"   >> $PEERS_FILE
#}

reset_connect()
{
   write_pptpc_pid_info "0" $TUN_IDX
   write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX

   rm -f $DONT_WANTYPE_UPDATE
   #restore_secret_file
   echo "0 100000" > $CSID_FILE
}

check_network_status()
{
   ap_mode="$C_LOCAL_AP_CNT_TYPE"
   if [ -z "$ap_mode" ] || [ "$ap_mode" == "0" ]; then
   
     S_LOCAL_AP_STATUS="`rdcsman 0x80010055 u32`"
     ap_status="$S_LOCAL_AP_STATUS"
   
     if [ -n "$ap_status" ] || [ "$ap_status" == "2" ]; then
       return;
     fi
   
   else
     return;
   fi
   
   get_local_cnt_status
   wan_status="$S_LOCAL_WAN_STATUS"
   if [ -z "$wan_status" ] || [ "$wan_status" == "0" ]; then
      for i in $WAN_LIST
      do
         get_local_cnt_status $i
         wan_status="$S_LOCAL_WAN_STATUS"
         [ -n "$wan_status" ] && [ "$wan_status" != "0" ] && break
      done
   fi

   if [ "$wan_status" == "$LOCAL_WAN_STATUS_CONNECT" ]; then
      return;
   fi
   echo "Main WAN isn't connected !!"

   get_failover_config
   autobak_enable="$C_3G_AUTOBAK_ENABLE"
   get_failover_cnt_status
   autobak_status="$S_3G_AUTOBAK_STATUS"
   if [ -n "$autobak_enable" ] && [ "$autobak_enable" != "0" ] &&
      [ "$autobak_status" == "$AUTOBAK_STATUS_3G_CONNECT" ]; then
      return;
   fi
   echo "3G Autobak isn't connected !!"

   loadsharing_enable="$C_FAILOVER_LOADSHARING_ENABLE"
   if [ -n "$loadsharing_enable" ] && [ "$loadsharing_enable" != "0" ]; then
      get_failover_cnt_status
      loadsharing_status="$S_FAILOVER_STATUS"
      if [ -n "$loadsharing_status" ] && [ "$loadsharing_status" == "$LOADSHARING_STATUS_CONNECT" ]; then
         return;
      fi
      echo "LoadSharing isn't connected !"
   else
      get_failover_cnt_status
      failover_status="$S_FAILOVER_STATUS"
      if [ -n "$failover_status" ] && [ "$failover_status" == "$FAILOVER_STATUS_CONNECT" ]; then
         return;
      fi
      echo "Failover isn't connected !"
   fi

   # Reset PID
   write_pptpc_pid_info "0" $TUN_IDX
   write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX

   logger -t "pptpc" "PPTP Client #$TUN_IDX waited for WAN/Failover/3G AutoBak/LoadSharing connecting... !"
   echo "PPTP Client #$TUN_IDX don't action since WAN isn't connected !"
   echo "0 100000" > $CSID_FILE
   exit 1
}

#chg_txqlen()
#{
#   # wan_type:
#   #  16 -> LOCAL_WANTYPE_3G        0x10
#   #  17 -> LOCAL_WANTYPE_IBURST    0x11
#   #  21 -> LOCAL_WANTYPE_FLASHOFDM 0x15
#   #  22 -> LOCAL_WANTYPE_S3G       0x16
#   #  64 -> LOCAL_WANTYPE_PPPOE     0x40
#   #  144 -> LOCAL_WANTYPE_DIALUP   0x90
#   addr=`get_csid_addr $CSID_C_LOCAL_WANTYPE 0`
#   wan_type="`rdcsman $addr u32`"
#   if [ $wan_type -eq 16 ] || [ $wan_type -eq 17 ] ||
#      [ $wan_type -eq 21 ] || [ $wan_type -eq 22 ] ||
#      [ $wan_type -eq 64 ] || [ $wan_type -eq 144 ]; then
#      addr=`get_csid_addr $CSID_S_LOCAL_WAN_IF_NAME 0`
#      wan_if="`rdcsman $addr str`"
#      tmp="`expr substr $wan_if 1 3`"
#
#      if [ "$tmp" == "ppp" ]; then
#         echo "set ifconfig $wan_if txqueuelen to 3"
#         ifconfig $wan_if txqueuelen 3 > /dev/null 2>&1
#      else
#         echo "Trick: set ifconfig ppp0 txqueuelen to 3"
#         ifconfig ppp0 txqueuelen 3 > /dev/null 2>&1
#      fi
#   fi
#}

get_host_ip()
{
   local time="0"
   local timeout="5"
   local domain_name="$1"
   if [ "$domain_name" == "" ]; then
      echo "No IP/Domain of PPTP Client ID $TUN_IDX !"
      logger -t "pptpc" "No Peer IP/Domain of PPTP Client ID $TUN_IDX "

      write_pptpc_pid_info "0" $TUN_IDX
      write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX
      exit 1
   fi

   PPTP_PNSSERVER="`getHostIP $domain_name &`"
   local gethip_pid="$!"
   while [ true ]; do
      if [ -n "$PPTP_PNSSERVER" ]; then
         write_pptpc_peerip_info "$PPTP_PNSSERVER" $TUN_IDX
         C_PPTP_CLI_PEERIP="$PPTP_PNSSERVER"
         break
      fi

      sleep 1
      time=$((time+1))
      [ $time -gt $timeout ] && break
   done

   if [ -z "$PPTP_PNSSERVER" ]; then
      echo "Cannot resolved IP, Please Check Host's Domain Name"
      logger -t "pptpc" "Please Check Peer IP/Domain of PPTP Client ID $TUN_IDX Again!"
      kill $gethip_pid > /dev/null 2>&1

      write_pptpc_pid_info "0" $TUN_IDX
      write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX
      exit 1
   fi
}

waitfor_ppp_negotiaction()
{
   local idx=0
   while [ true ]; do
      # Check the PPTP connection
      if [ ! -f "$DONT_WANTYPE_UPDATE" ]; then
         echo "PPP negotiation complete !!"
         break
      fi

      if [ $idx -ge 30 ]; then
         echo "PPTP Connecting ... timeout !!"
         logger -t "pptpc" "PPTP Connecting ... timeout !!"
         break
      fi

      idx=$((idx+1))
      sleep 1
      echo "PPTP Connecting ... $idx sec"
   done

   if [ ! -r "$PIDFILE_PPPD" ] ; then
      echo "Can't find $PIDFILE_PPPD. May PPP negotiation failed !! Check PPP option, plz !"
      logger -t "pptpc" "Can't find $PIDFILE_PPPD. May PPP negotiation failed !! Check PPP option, plz !"
      reset_connect
      exit 1
   fi

   sl_get_ppp_PID_IFname $PIDFILE_PPPD PPP_PID PPP_IF
   if [ "$?" != "0" ] ; then
      echo "Can't find PPPD/PPTP process"
      reset_connect
      exit 1
   fi

   # Show the cnt status
   logger -t "pptpc" "Link is up and running on interface $PPP_IF (PID: $PPP_PID)"
   echo "PPTP's status : Link is up and running on interface $PPP_IF"
   echo "IF=$PPP_IF  PID=$PPP_PID"
}

main()
{
   echo "1 0" > $CSID_FILE

   # Test if the tunnel had created
   get_pptpc_cnt_info $TUN_IDX
   cnt_pid="$S_PPTP_CLI_PEER_PID"
   if [ -n "$cnt_pid" ] && [ $cnt_pid -gt 0 ] && [ $cnt_pid -lt 65535 ]; then
      logger -t "pptpc"  "Tunnel $TUN_IDX is already running (PID:$cnt_pid)"
      echo "Tunnel $TUN_IDX is already running (PID:$cnt_pid)"
      echo "0 100000" > $CSID_FILE
      exit 1
   else
      write_pptpc_pid_info "-1" $TUN_IDX
   fi

   check_network_status

   # Change Tx Quele length for 3G (no longer need)
   # chg_txqlen

   # Clear last ppp auth fail temp file
   rm -rf /var/run/ppp_auth*
   if [ -f "$RESET_FILE" ]; then
      (. $RESET_FILE)
      rm -f $RESET_FILE
   fi
   if [ -f "$XFRM_DEL_FILE" ]; then
      (. $XFRM_DEL_FILE)
      rm -f $XFRM_DEL_FILE
      rm -f $XFRM_ADD_FILE
   fi
   get_pptpc_config
   get_pptpc_tunnel_config $TUN_IDX

   # Get Server's address
   get_host_ip "$C_PPTP_CLI_PEERIP_STR"
   echo "PPTP_PNSSERVER=$PPTP_PNSSERVER"
   if [ -z "$PPTP_PNSSERVER" ]; then
      write_pptpc_pid_info "0" $TUN_IDX
      write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX

      echo "Unknown PPTP Server address !!"
      logger -t "pptpc" "Unknown PPTP Server address !!"
      echo "0 100000" > $CSID_FILE
      exit 1
   fi

   # Generate new negotiaction file
   # Make sure PPTP Client's account/password/config wouldn't conflict with others
   #gen_secret_file
   #gen_peers_file
   #gen_ppp_options
   gen_pptpc_options
   gre_total_en="`rdcsman 0x00710B00 u32`"
   if [ "$gre_total_en" = "1" ]; then
      gre_tunnel_idx=0
      tunnel_dmvpn_enable=0
      gre_dmvpn_enable=0
      while [ $gre_tunnel_idx -lt 32 ]; do
          gre_idx="`printf "%02X" $gre_tunnel_idx`"
          tunnel_dmvpn_enable="`rdcsman 0x007114${gre_idx} u32`"
          gre_tunnel_idx=$((gre_tunnel_idx+1))
           if [ "$tunnel_dmvpn_enable" = "1" ]; then
              gre_dmvpn_enable=1
           fi
      done
   fi
   #Add default route for PPTP
   local tun_wan="$C_PPTP_CLI_WAN"
   if [ "$tun_wan" = "1" ]; then
     wan_idx="`rdcsman 0x00010600 u8`"
	 #idx="`printf "%X" $wan_idx`"
     if [ "$wan_idx" = "99" ]; then
       wan_GW="`rdcsman 0x80010004 ipv4`"
       wan_IF="`rdcsman 0x8001000b str`"
       wan_IP="`rdcsman 0x80010002 ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else
		  ip_1="`rdcsman 0x80010002 u32`"
		  netmask="`rdcsman 0x80010003 u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
     elif [ $wan_idx -gt 0 ] && [ $tun_wan -le 16 ]; then
       let "idx=$wan_idx - 1"
       idx="`printf "%X" $idx`"
       wan_GW="`rdcsman 0x8001013${idx} ipv4`"
       wan_IF="`rdcsman 0x8001019${idx} str`"
       wan_IP="`rdcsman 0x8001011${idx} ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else
          let "idx=$wan_idx - 1"
          idx="`printf "%X" $idx`"
          ip_1="`rdcsman 0x8001011${idx} u32`"
		  netmask="`rdcsman 0x8001012${idx} u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
    elif [ "$wan_idx" = "0" ]; then
         logger -t "pptpc" "WAN1 is disable!!"
         exit 1
    fi
   elif [ "$tun_wan" = "2" ]; then
     wan_idx="`rdcsman 0x00010601 u8`"
     #idx="`printf "%X" $wan_idx`"
     if [ "$wan_idx" = "99" ]; then
       wan_GW="`rdcsman 0x80010004 ipv4`"
       wan_IF="`rdcsman 0x8001000b str`"
       wan_IP="`rdcsman 0x80010002 ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else
          ip_1="`rdcsman 0x80010002 u32`"
		  netmask="`rdcsman 0x80010003 u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
     elif [ $wan_idx -gt 0 ] && [ $tun_wan -le 16 ]; then
       let "idx=$wan_idx - 1"
       idx="`printf "%X" $idx`"
       wan_GW="`rdcsman 0x8001013${idx} ipv4`"
       wan_IF="`rdcsman 0x8001019${idx} str`"
       wan_IP="`rdcsman 0x8001011${idx} ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else   
          let "idx=$wan_idx - 1"
          idx="`printf "%X" $idx`"
          ip_1="`rdcsman 0x8001011${idx} u32`"
		  netmask="`rdcsman 0x8001012${idx} u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
      elif [ "$wan_idx" = "0" ]; then
         logger -t "pptpc" "WAN2 is disable!!"
         exit 1
      fi  
   elif [ "$tun_wan" = "3" ]; then
     wan_idx="`rdcsman 0x00010602 u8`"
     #idx="`printf "%X" $wan_idx`"
     if [ "$wan_idx" = "99" ]; then
       wan_GW="`rdcsman 0x80010004 ipv4`"
       wan_IF="`rdcsman 0x8001000b str`"
       wan_IP="`rdcsman 0x80010002 ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else
          ip_1="`rdcsman 0x80010002 u32`"
		  netmask="`rdcsman 0x80010003 u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
     elif [ $wan_idx -gt 0 ] && [ $tun_wan -le 16 ]; then
       let "idx=$wan_idx - 1"
       idx="`printf "%X" $idx`"
       wan_GW="`rdcsman 0x8001013${idx} ipv4`"
       wan_IF="`rdcsman 0x8001019${idx} str`"
       wan_IP="`rdcsman 0x8001011${idx} ipv4`"
       peer_IP="$C_PPTP_CLI_PEERIP"
       if [ "$wan_IF" = "" ]; then
          logger -t "pptpc" "Unknown WAN interface!!"
          exit 1
       else   
          let "idx=$wan_idx - 1"
          idx="`printf "%X" $idx`"
          ip_1="`rdcsman 0x8001011${idx} u32`"
		  netmask="`rdcsman 0x8001012${idx} u32`"
		  idx="`printf "%02X" $TUN_IDX`"
		  ip_2="`rdcsman 0x000513${idx} u32`"
		  if [ "$(($ip_1&$netmask))" = "$(($ip_2&$netmask))" ]; then
		     #subnet is same ,not need gateway
			 route add $peer_IP dev $wan_IF
             echo "route del $peer_IP dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
          else
		     #subnet is different ,need gateway
			 route add $peer_IP gw $wan_GW dev $wan_IF
             echo "route del $peer_IP gw $wan_GW dev $wan_IF >/dev/null 2>&1 " >> $RESET_FILE
		  fi
          echo "ip xfrm policy add src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy add src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_ADD_FILE
          echo "ip xfrm policy del src $wan_IP dst $peer_IP dir out >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          echo "ip xfrm policy del src $peer_IP dst $wan_IP dir in >/dev/null 2>&1 " >> $XFRM_DEL_FILE
          #logger -t "pptpc" "dmvpn enable is $gre_dmvpn_enable"
           if [ "$gre_dmvpn_enable" = "1" ]; then
               logger -t "pptpc" "set tun$TUN_IDX ip xfrm"
               ip xfrm policy add src $wan_IP dst $peer_IP dir out
               ip xfrm policy add src $peer_IP dst $wan_IP dir in
           fi
       fi
     elif [ "$wan_idx" = "0" ]; then
         logger -t "pptpc" "WAN3 is disable!!"
         exit 1
     fi  
   fi   
   # Start Connect & Log PPTP Session ID to /var/run/
   echo "PPTP Client start to connect $PPTP_PNSSERVER!"
   touch $DONT_WANTYPE_UPDATE
   sleep 2
   pppd call $PPTP_LINKNAME &

   # Waiting Time for negotiaction
   waitfor_ppp_negotiaction

   # Restore original PPP secrets
   #restore_secret_file

   # Some configuration after the pptp connection established
   log_pptp_info
   setup_route
   setup_iptables

   # Enlarger MTU to avoid fragment packets
   get_wantype_pptp_config
   local mtu="$C_PPTP_MTU"
   if [ -z "$mtu" ] || [ "$mtu" == "0" ]; then
      for i in $WAN_LIST
      do
         get_wantype_pptp_config $i
         mtu="$C_PPTP_MTU"
         [ -n "$mtu" ] && [ $mtu -gt 0 ] && break
      done
   fi

   if [ -n "$mtu" ] && [ $mtu -gt 0 ]; then
      ifconfig $PPP_IF mtu $mtu
   else
      get_local_config
      wantype="$C_LOCAL_WANTYPE"
      if [ -z "$wantype" ] || [ "$wantype" == "0" ]; then
         for i in $WAN_LIST
         do
            get_local_config $i
            wantype="$C_LOCAL_WANTYPE"
            [ -n "$wantype" ] && [ $wantype -gt 0 ] && break
         done
      fi
      if [ -n "$wantype" ] && [ $wantype -eq 16 ] ; then
         get_3g_config
         mtu_3g="$C_3G_MTU"
         if [ -z "$mtu_3g" ] || [ "$mtu_3g" == "0" ]; then
            for i in $WAN_LIST
            do
               get_3g_config $i
               mtu_3g="$C_3G_MTU"
               [ -n "$mtu_3g" ] && [ $mtu_3g -gt 0 ] && break
            done
         fi

         set_mtu=$(($mtu_3g-80))
         ifconfig $PPP_IF mtu $set_mtu
      else
         ifconfig $PPP_IF mtu 1500
      fi
   fi
   ifconfig $PPP_IF txqueuelen 1000
   echo "0 100000" > $CSID_FILE
}

#
#  Main ()
#
main

