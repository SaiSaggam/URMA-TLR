#!/bin/sh

if [ -z "$1" ]; then
   echo "you need specified arguements"
   exit 1
fi

TUN_IDX="$1"
TUN_PID="$2"
PIDFILE_PPPD="/var/run/ppp-pptpc-$TUN_IDX.pid"
RESET_FILE="/var/run/pptpc-reset-$TUN_IDX"
XFRM_ADD_FILE="/var/run/pptpc-xfrm-add-$TUN_IDX"
XFRM_DEL_FILE="/var/run/pptpc-xfrm-del-$TUN_IDX"
DONT_WANTYPE_UPDATE="/var/run/dont_update_wantype"
DISCONNECT="0"
CONNECTING="1"
CONNECT="2"
DISCONNECTING="3"

if [ -f "/tmp/pptpc-header" ]; then
   . /tmp/pptpc-header
elif [ -f "/usr/bin/pptpc-header" ]; then
   . /usr/bin/pptpc-header
fi

kill_pptpc()
{
   #addr=`get_csid_addr $CSID_C_PPTP_CLI_PEERIP $TUN_IDX`
   #PPTP_PNSSERVER="`rdcsman $addr ipv4`"
   #PPTP_PNSSERVER="`echo ${PPTP_PNSSERVER%.*}`."

   #pslist=`ps | grep "pptp: call for" | grep $PPTP_PNSSERVER `
   #if [ ! -z "$pslist" ]; then
   #   PPTP_PID=
   #   for i in $pslist
   #   do
   #      PPTP_PID=`echo $i`
   #      break
   #   done
   #   kill $PPTP_PID >/dev/null 2>&1
   #fi

   # Kill pppd for user/kernel mode
   sl_get_ppp_PID_IFname $PIDFILE_PPPD PPP_PID PPP_IF
   kill -0 $PPP_PID > /dev/null 2>&1
   [ "$?" == "0" ] && kill $PPP_PID > /dev/null 2>&1
   [ "$?" != "0" ] && kill -9 $PPP_PID > /dev/null 2>&1

   #PPTP_PID=`ps | grep "pptp: call manager" | grep $PPTP_PNSSERVER |  awk '{printf("%d", $1)}'`
   #kill $PPTP_PID > /dev/null 2>&1
   #kill $TUN_PID > /dev/null 2>&1
}

kill_pptpc_()
{
   PPTP_PID="`awk '{if(NR == 1) print $0}' $PIDFILE_PPPD`"
   kill $PPTP_PID >/dev/null 2>&1
}

main()
{
   touch $DONT_WANTYPE_UPDATE

   # Reset all IP Tables & Routing
   if [ -f "$RESET_FILE" ]; then
      (. $RESET_FILE)
      rm -f $RESET_FILE
   fi
   if [ -f "$XFRM_DEL_FILE" ]; then
      (. $XFRM_DEL_FILE)
      rm -f $XFRM_DEL_FILE
      if [ -f "$XFRM_ADD_FILE" ]; then
         rm -f $XFRM_ADD_FILE
      fi
   fi
   # kill PPTP tuunel
   kill_pptpc

   # Reset WebUI
   clear_pptpc_cnt_info $TUN_IDX
   write_pptpc_cnt_status "$DISCONNECT" $TUN_IDX

   get_pptpc_tunnel_config $TUN_IDX

   #cnt_type="$C_PPTP_CLI_CONNECT_TYPE"
   #if [ -z "$cnt_type" ] && [ "$cnt_type" == "$PPTP_CNT_TYPE_ONDEMAND" ]; then
      #tun_enable="$C_PPTP_CLI_USER_ENABLE"
      #if [ -n "$tun_enable" ] && [ "$tun_enable" != "0" ]; then
         #echo "PPTP tunnel $TUN_IDX starts on-demand... "
         #pptpc-ondemand start $TUN_IDX
      #else
         #echo "PPTP tunnel $TUN_IDX stop on-demand... "
         #pptpc-ondemand stop $TUN_IDX
      #fi
   #fi
   rm -f $DONT_WANTYPE_UPDATE
}

#
# Main
#
main
