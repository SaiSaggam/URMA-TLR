#!/bin/sh

if [ -f "/tmp/l2tpc-header" ]; then
   . /tmp/l2tpc-header
elif [ -f "/usr/bin/l2tpc-header" ]; then
   . /usr/bin/l2tpc-header
fi

wr_conf() {
   echo "$1" >> $L2TP_CONFIG_FILE
}

wr_ppp_opts() {
   echo "lac-opts \"$1\"" >> $L2TP_CONFIG_FILE
}

# The options of l2tp wantype connection applied for rp-l2tp
# the location of option: /etc/l2tp/l2tp$MULTIWAN.conf
gen_wantype_l2tp_options() {
   rm -f $L2TP_CONFIG_FILE > /dev/null 2>&1

   check_kernel_mode
   local KERNEL_MODE="$?"
   #check_kernel_version_2_6_36
   #local KERNEL_VERSION_2_6_36="$?"
   get_port_config
   local l2tpd_port="$C_L2TP_PORT"
   local l2tpd_default_port="$C_L2TP_PORT_DEFAULT"
   local l2tpd_local_bind_addr="0.0.0.0"
   local L2TP_LNSSERVER="$C_L2TP_LNS_SERVER_IP"
   local l2tp_socket_file="$L2TP_SOCKET_FILE"
   local used_mppe="$C_L2TP_ENABLE_MPPE"
   local linkname="$L2TP_LINKNAME"
   local l2tp_user="$C_L2TP_USER"
   local l2tp_pass="$C_L2TP_PASS"
   #local ccp_enable=""
   local L2TP_AUTH_REJECT="2" # Constant
   local do_auth="1"
   local auth_pap="0"
   local auth_chap="0"
   local auth_mschap="0"
   local auth_mschapv2="0"
   local mppe_enable_40="$C_L2TP_ENABLE_MPPE_40"
   local mppe_enable_56="$C_L2TP_ENABLE_MPPE_56"
   local mppe_enable_128="$C_L2TP_ENABLE_MPPE_128"
   local CNTTYPE="$C_L2TP_CNTTYPE"
   local IDLETIME="$C_L2TP_IDLETIME"
   local MTU_SIZE="$C_L2TP_MTU"
   #local local_ip=""
   #local remote_ip=""
   #local L2TP_LCP_TYPE_AUTO=0 # Constant
   #local L2TP_LCP_TYPE_MANUAL=1 # Constant
   #local L2TP_LCP_TYPE_DISABLE=2 # Constant
   #local lcp_type="$L2TP_LCP_TYPE_MANUAL"
   #local l2tpc_qos_enable="$C_L2TP_CLI_QOS_ENABLE"
   local wan_type=""
   
   get_local_config
   wan_type="$C_LOCAL_WANTYPE"
   if [ -z "$wan_type" ] || [ "$wan_type" == "0" ]; then
      for i in $WAN_LIST
      do
         get_local_config $i
         wan_type="$C_LOCAL_WANTYPE"
         [ -n "$wan_type" ] && [ $wan_type -gt 0 ] && break
      done
   fi
   
   local lcp_interval="30"
   local lcp_failure="6"
   local PPP_PRIDNS="$C_L2TP_PRIDNS"
   local PPP_SECDNS="$C_L2TP_SECDNS"
   local up_script="/etc/ppp/ip-up-$linkname"
   local down_script="/etc/ppp/ip-down-$linkname"
   get_sys_rom_info
   local hostname="$C_LOCAL_HOSTNAME"
   local romid="$S_SYS_INFO_ROM_ID"

   wr_conf "global"
   wr_conf "load-handler \"sync-pppd.so\""
   wr_conf "load-handler \"cmd.so\""
   wr_conf ""

   if [ -n "$l2tpd_port" ] && [ $l2tpd_port -gt 0 ]; then
      wr_conf "listen-port $l2tpd_port"
   else
      wr_conf "listen-port $l2tpd_default_port"
   fi

   wr_conf "listen-addr $l2tpd_local_bind_addr"
   wr_conf ""

   wr_conf "section sync-pppd"
   wr_conf "lac-pppd-opts \"sync\""

   if [ -n "$KERNEL_MODE" ] && [ "$KERNEL_MODE" != "0" ]; then
      wr_conf "kernel-mode 1"
   else
      wr_conf "kernel-mode 0"
   fi

   wr_conf ""

   wr_conf "section peer"
   wr_conf "peer $L2TP_LNSSERVER"

   # Begin of PPPD Config

   wr_conf "lac-handler sync-pppd"
   wr_ppp_opts "linkname $linkname"

   # Add pppd arguments (username, password) instead of checking pap-secret or chap-secrets (Issues for Login Security)
   wr_ppp_opts "user \\\"$l2tp_user\\\""
   wr_ppp_opts "password \\\"$l2tp_pass\\\""

   wr_ppp_opts "hide-password"
   wr_ppp_opts "noipdefault"
   wr_ppp_opts "nodetach"
   wr_ppp_opts "noaccomp"
   wr_ppp_opts "nopcomp"
   wr_ppp_opts "passive" 

   #if [ -n "$ccp_enable" ] && [ "$ccp_enable" != "0" ]; then
   #   wr_ppp_opts "bsdcomp 9,15"
   #   wr_ppp_opts "deflate 9,15"
   #   wr_ppp_opts "predictor1"
   #   wr_ppp_opts "lzs"
   #else
      wr_ppp_opts "nobsdcomp"
      wr_ppp_opts "nodeflate"
   #fi

   wr_ppp_opts "novj"
   wr_ppp_opts "novjccomp"
   wr_ppp_opts "noauth"

   if [ -n "$do_auth" ] && [ "$do_auth" != "0" ]; then
      if [ -n "$auth_pap" -a "$auth_pap" == "$L2TP_AUTH_REJECT" ] || [ -n "$used_mppe" -a "$used_mppe" != "0" ]; then
         wr_ppp_opts "refuse-pap"
      fi
      if [ -n "$auth_chap" -a "$auth_chap" == "$L2TP_AUTH_REJECT" ] || [ -n "$used_mppe" -a "$used_mppe" != "0" ]; then
         wr_ppp_opts "refuse-chap"
      fi
      if [ -n "$auth_mschap" ] && [ "$auth_mschap" == "$L2TP_AUTH_REJECT" ]; then
         wr_ppp_opts "refuse-mschap"
      fi
      if [ -n "$auth_mschapv2" ] && [ "$auth_mschapv2" == "$L2TP_AUTH_REJECT" ]; then
         wr_ppp_opts "refuse-mschap-v2"
      fi
   fi

   wr_ppp_opts "refuse-eap"
   wr_ppp_opts "default-asyncmap"

   wr_ppp_opts "debug"
   # wr_ppp_opts "dump" # Note: Must remove this option to avoid that pppd could hang when parsing ppp options (For kernel mode only)
   wr_ppp_opts "logfd 2"

   #if [ -z "$KERNEL_MODE" -o "$KERNEL_MODE" == "0" ] || [ -z "$KERNEL_VERSION_2_6_36" -o "$KERNEL_VERSION_2_6_36" == "0" ]; then
   #   wr_ppp_opts "lock"
   #fi

   if [ -n "$used_mppe" ] && [ "$used_mppe" != "0" ]; then
      local mppe_opts="mppe required,stateless"
      [ -n "$used_mppe" ] && [ "$mppe_enable_40" == "0" ] && mppe_opts="$mppe_opts,no40"
      [ -n "$used_mppe" ] && [ "$mppe_enable_56" == "0" ] && mppe_opts="$mppe_opts,no56"
      [ -n "$used_mppe" ] && [ "$mppe_enable_128" == "0" ] && mppe_opts="$mppe_opts,no128"
      [ -z "$used_mppe" -o "$mppe_opts" == "mppe required,stateless,no40,no56,no128" ] && mppe_opts="mppe required,stateless"
      wr_ppp_opts "$mppe_opts"
   else
      #if [ -z "$KERNEL_MODE" ] || [ "$KERNEL_MODE" == "0" ]; then
      #   wr_ppp_opts "sync"
      #fi
      wr_ppp_opts "noccp"
      wr_ppp_opts "nomppe"
      wr_ppp_opts "nomppc"
   fi

   if [ -n "$CNTTYPE" ] && [ "$CNTTYPE" != "1" ]; then # NOT Auto
      wr_ppp_opts "holdoff 3"
      wr_ppp_opts "nopersist"
      wr_ppp_opts "ipcp-accept-remote"
      wr_ppp_opts "ipcp-accept-local"
      wr_ppp_opts "ktune"

      if [ -n "$IDLETIME" ] && [ $((IDLETIME)) -gt 0 ]; then
         wr_ppp_opts "idle $IDLETIME"
      else
         wr_ppp_opts "idle 600"
      fi
   fi

   if [ -z "$MTU_SIZE" ] || [ $((MTU_SIZE)) -le 0 ] ; then
      wr_ppp_opts "mtu 1460"
   else
      wr_ppp_opts "mtu $MTU_SIZE"
   fi

   #[ "$local_ip" == "0.0.0.0" ] && local_ip=""
   #[ "$remote_ip" == "0.0.0.0" ] && remote_ip=""
   #if [ -n "$local_ip" ] || [ -n "$remote_ip" ]; then
   #   wr_ppp_opts "$local_ip:$remote_ip"
   #fi

   #if [ -z "$lcp_type" ] || [ "$lcp_type" == "$L2TP_LCP_TYPE_AUTO" ]; then
   #   if [ -n "$l2tpc_qos_enable" ] && [ "$l2tpc_qos_enable" != "0" ]; then
   #      wr_ppp_opts "lcp-echo-interval 2"
   #      wr_ppp_opts "lcp-echo-failure 90"
   #   else
   #      # WAN Type:
   #      #  16 -> LOCAL_WANTYPE_3G        0x10
   #      #  17 -> LOCAL_WANTYPE_IBURST    0x11
   #      #  21 -> LOCAL_WANTYPE_FLASHOFDM 0x15
   #      #  22 -> LOCAL_WANTYPE_S3G       0x16
   #      #  64 -> LOCAL_WANTYPE_PPPOE     0x40
   #      #  144 -> LOCAL_WANTYPE_DIALUP   0x90
   #      if [ -z "$wan_type" ]; then
   #         wr_ppp_opts "lcp-echo-interval 30"
   #         wr_ppp_opts "lcp-echo-failure 6"
   #      elif [ "$wan_type" == "16" ] || [ "$wan_type" == "17" ] ||
   #         [ "$wan_type" == "21" ] || [ "$wan_type" == "22" ] ||
   #         [ "$wan_type" == "64" ] || [ "$wan_type" == "144" ]; then
   #         wr_ppp_opts "lcp-echo-interval 2"
   #         wr_ppp_opts "lcp-echo-failure 90"
   #      else
   #         wr_ppp_opts "lcp-echo-interval 30"
   #         wr_ppp_opts "lcp-echo-failure 6"
   #      fi
   #   fi
   #elif [ "$lcp_type" == "$L2TP_LCP_TYPE_MANUAL" ]; then
      if [ -z "$lcp_interval" ] || [ $((lcp_interval)) -le 0 ]; then
         lcp_interval="30"
      fi

      if [ -z "$lcp_failure" ] || [ $((lcp_failure)) -le 0 ]; then
         lcp_failure="6"
      fi

      wr_ppp_opts "lcp-echo-interval $lcp_interval"
      wr_ppp_opts "lcp-echo-failure $lcp_failure"
   #elif [ "$lcp_type" == "$L2TP_LCP_TYPE_DISABLE" ]; then
   #   : # echo "Disable LCP Echo Request !"
   #else
   #   : # echo "Unknow LCP Echo Request Type !"
   #fi

   if [ -z "$PPP_PRIDNS" -o "$PPP_PRIDNS" == "0.0.0.0" ] && [ -z "$PPP_SECDNS" -o "$PPP_SECDNS" == "0.0.0.0" ]; then
      wr_ppp_opts "usepeerdns"
   fi

   echo "#!/bin/sh" > $up_script
   echo "#!/bin/sh" > $down_script
   if [ -f "/tmp/l2tp-action" ]; then
      echo "/tmp/l2tp-action ip-up \$*" >> $up_script
      echo "/tmp/l2tp-action ip-down \$*" >> $down_script
   elif [ -f "/usr/bin/l2tp-action" ]; then
      echo "/usr/bin/l2tp-action ip-up \$*" >> $up_script
      echo "/usr/bin/l2tp-action ip-down \$*" >> $down_script
   fi
   chmod +x $up_script
   chmod +x $down_script

   wr_ppp_opts "ip-up $up_script"
   wr_ppp_opts "ip-down $down_script"
   wr_ppp_opts "ipparam $linkname"

   # End of PPPD Config

   wr_conf "hide-avps no"
   wr_conf "retain-tunnel 0"
   wr_conf "persist 0"
   wr_conf "maxfail 1"
   wr_conf "holdoff 3"

   if [ "$hostname" != "" ]; then
      wr_conf "hostname $hostname"
   else
      wr_conf "hostname $romid"
   fi

   wr_conf ""
   wr_conf "section cmd"
   wr_conf "socket-path \"$l2tp_socket_file\""
   wr_conf ""
}

# The options of l2tp client connection applied for rp-l2tp
# the location of option: /etc/l2tp/l2tpc-$TUN_IDX.conf
gen_l2tpc_options() {
   rm -f $L2TP_CONFIG_FILE > /dev/null 2>&1

   check_kernel_mode
   local KERNEL_MODE="$?"
   check_kernel_version_2_6_36
   local KERNEL_VERSION_2_6_36="$?"
   get_port_config
   local l2tpd_port="$C_L2TP_PORT"
   local l2tpd_default_port="$C_L2TP_PORT_DEFAULT"
   local l2tpd_local_bind_addr="0.0.0.0"
   local L2TP_LNSSERVER="$C_L2TP_CLI_PEERIP"
   local l2tp_socket_file="$L2TP_SOCKET_FILE"
   local used_mppe="$C_L2TP_CLI_MPPE"
   local linkname="$L2TP_LINKNAME"
   local l2tp_user="$C_L2TP_CLI_USER"
   local l2tp_pass="$C_L2TP_CLI_PASSWORD"
   local ccp_enable="$C_L2TP_CLI_CCP_ENABLE"
   local L2TP_AUTH_REJECT="2" # Constant
   local do_auth="$C_L2TP_CLI_DO_AUTH"
   local auth_pap="$C_L2TP_CLI_AUTH_PAP"
   local auth_chap="$C_L2TP_CLI_AUTH_CHAP"
   local auth_mschap="$C_L2TP_CLI_AUTH_MSCHAP"
   local auth_mschapv2="$C_L2TP_CLI_AUTH_MSCHAPV2"
   local mppe_enable_40="1"
   local mppe_enable_56="1"
   local mppe_enable_128="1"
   local CNTTYPE="$C_L2TP_CLI_CONNECT_TYPE"
   local IDLETIME="$C_L2TP_CLI_IDLETIME"
   local HOLDOFFTIME="$C_L2TP_CLI_HOLDOFFTIME"
   local MAXFAIL="$C_L2TP_CLI_MAX_FAIL"
   local RWS="$C_L2TP_CLI_RWS"
   local MTU_SIZE=""
   local local_ip="$C_L2TP_CLI_LOCAL_IP"
   local remote_ip="$C_L2TP_CLI_REMOTE_IP"
   local L2TP_LCP_TYPE_AUTO="0" # Constant
   local L2TP_LCP_TYPE_MANUAL="1" # Constant
   local L2TP_LCP_TYPE_DISABLE="2" # Constant
   local lcp_type="$C_L2TP_CLI_LCP_TYPE"
   local l2tpc_qos_enable="$C_L2TP_CLI_QOS_ENABLE"   
   local wan_type=""
   local l2tpc_tun_password="$C_L2TP_CLI_TUN_PASSWORD"
   local l2tpc_port="$C_L2TP_CLI_PORT"
   local l2tpc_lns_port="$C_L2TP_CLI_LNS_PORT"
   local IDX="$1"
   
   get_local_config
   wan_type="$C_LOCAL_WANTYPE"
   if [ -z "$wan_type" ] || [ "$wan_type" == "0" ]; then
      for i in $WAN_LIST
      do
         get_local_config $i
         wan_type="$C_LOCAL_WANTYPE"
         [ -n "$wan_type" ] && [ $wan_type -gt 0 ] && break
      done
   fi

   local lcp_interval="$C_L2TP_CLI_LCP_INTERVAL"
   local lcp_failure="$C_L2TP_CLI_LCP_FAILURE"
   #local PPP_PRIDNS=""
   #local PPP_SECDNS=""
   #local up_script="/etc/ppp/ip-up-$linkname"
   #local down_script="/etc/ppp/ip-down-$linkname"
   #get_sys_rom_info
   local hostname="l2tpc"
   #local romid="$S_SYS_INFO_ROM_ID"

   # For Cutomer TeleWell
   #if [ -n "$S_SYS_INFO_ROM_ID_CUSTOMER_INFO" ] && [ "$S_SYS_INFO_ROM_ID_CUSTOMER_INFO" == "TLW" ]; then
   #   logger -p 8.7 -t "l2tpc" "Write extra PPP options for TeleWell "
   #   MTU_SIZE="1460"
   #   auth_mschapv2="$L2TP_AUTH_REJECT"
   #fi

   wr_conf "global"
   wr_conf "load-handler \"sync-pppd.so\""
   wr_conf "load-handler \"cmd.so\""
   wr_conf ""
   
   if [ -n "$l2tpc_port" ] && [ $l2tpc_port -gt 0 ]; then
      wr_conf "listen-port $l2tpc_port"
      local TUN_IDX="`printf %02X $((IDX))`"
      wrcsman "0x80062d$TUN_IDX $l2tpc_port"
   else
       if [ -n "$l2tpd_port" ] && [ $l2tpd_port -gt 0 ]; then
          wr_conf "listen-port $l2tpd_port"
          local TUN_IDX="`printf %02X $((IDX))`"
          wrcsman "0x80062d$TUN_IDX $l2tpd_port"
       else
          wr_conf "listen-port $l2tpd_default_port"
          local TUN_IDX="`printf %02X $((IDX))`"
          wrcsman "0x80062d$TUN_IDX $l2tpd_default_port"
       fi
   fi
   
   wr_conf "listen-addr $l2tpd_local_bind_addr"
   wr_conf ""

   wr_conf "section sync-pppd"
   wr_conf "lac-pppd-opts \"sync\""

   if [ -n "$KERNEL_MODE" ] && [ "$KERNEL_MODE" != "0" ]; then
      wr_conf "kernel-mode 1"
   else
      wr_conf "kernel-mode 0"
   fi

   wr_conf ""

   wr_conf "section peer"
   if [ -n "$l2tpc_lns_port" ] && [ $l2tpc_lns_port -gt 0 ]; then
      wr_conf "port $l2tpc_lns_port"
   fi
   wr_conf "peer $L2TP_LNSSERVER"
   
   if [ -n "$l2tpc_tun_password" ]; then
       wr_conf "secret \"$l2tpc_tun_password\""
   fi
   
   # Begin of PPPD Config

   wr_conf "lac-handler sync-pppd"
   wr_ppp_opts "linkname $linkname"

   # Add pppd arguments (username, password) instead of checking pap-secret or chap-secrets (Issues for Login Security)
   wr_ppp_opts "user \\\"$l2tp_user\\\""
   wr_ppp_opts "password \\\"$l2tp_pass\\\""

   wr_ppp_opts "hide-password"
   wr_ppp_opts "noipdefault"
   wr_ppp_opts "nodetach"
   wr_ppp_opts "noaccomp"
   wr_ppp_opts "nopcomp"

   if [ -n "$ccp_enable" ] && [ "$ccp_enable" != "0" ]; then
      wr_ppp_opts "bsdcomp 9,15"
      wr_ppp_opts "deflate 9,15"
      wr_ppp_opts "predictor1"
      wr_ppp_opts "lzs"
   else
      wr_ppp_opts "nobsdcomp"
      wr_ppp_opts "nodeflate"
   fi

   wr_ppp_opts "novj"
   wr_ppp_opts "novjccomp"
   wr_ppp_opts "noauth"

   if [ -n "$do_auth" ] && [ "$do_auth" != "0" ]; then
      if [ -n "$auth_pap" -a "$auth_pap" == "$L2TP_AUTH_REJECT" ] || [ -n "$used_mppe" -a "$used_mppe" != "0" ]; then
         wr_ppp_opts "refuse-pap"
      fi
      if [ -n "$auth_chap" -a "$auth_chap" == "$L2TP_AUTH_REJECT" ] || [ -n "$used_mppe" -a "$used_mppe" != "0" ]; then
         wr_ppp_opts "refuse-chap"
      fi
      if [ -n "$auth_mschap" ] && [ "$auth_mschap" == "$L2TP_AUTH_REJECT" ]; then
         wr_ppp_opts "refuse-mschap"
      fi
      if [ -n "$auth_mschapv2" ] && [ "$auth_mschapv2" == "$L2TP_AUTH_REJECT" ]; then
         wr_ppp_opts "refuse-mschap-v2"
      fi
   fi

   wr_ppp_opts "refuse-eap"
   wr_ppp_opts "default-asyncmap"

   #if [ -z "$KERNEL_MODE" -o "$KERNEL_MODE" == "0" ] || [ -z "$KERNEL_VERSION_2_6_36" -o "$KERNEL_VERSION_2_6_36" == "0" ]; then
   #   wr_ppp_opts "lock"
   #fi

   wr_ppp_opts "debug"
   # wr_ppp_opts "dump" # Note: Must remove this option to avoid that pppd could hang when parsing ppp options (For kernel mode only)
   wr_ppp_opts "logfd 2"

   if [ -n "$used_mppe" ] && [ "$used_mppe" != "0" ]; then
      local mppe_opts="mppe required,stateless"
      [ -n "$used_mppe" ] && [ "$mppe_enable_40" == "0" ] && mppe_opts="$mppe_opts,no40"
      [ -n "$used_mppe" ] && [ "$mppe_enable_56" == "0" ] && mppe_opts="$mppe_opts,no56"
      [ -n "$used_mppe" ] && [ "$mppe_enable_128" == "0" ] && mppe_opts="$mppe_opts,no128"
      [ -z "$used_mppe" -o "$mppe_opts" == "mppe required,stateless,no40,no56,no128" ] && mppe_opts="mppe required,stateless"
      wr_ppp_opts "$mppe_opts"
   else
      #if [ -z "$KERNEL_MODE" ] || [ "$KERNEL_MODE" == "0" ]; then
      #   wr_ppp_opts "sync"
      #fi
      wr_ppp_opts "noccp"
      wr_ppp_opts "nomppe"
      wr_ppp_opts "nomppc"
   fi

   if [ -n "$CNTTYPE" ] && [ "$CNTTYPE" != "1" ]; then # NOT Auto
      wr_ppp_opts "holdoff 3"
      wr_ppp_opts "nopersist"
      wr_ppp_opts "ipcp-accept-remote"
      wr_ppp_opts "ipcp-accept-local"
      wr_ppp_opts "ktune"

      if [ -n "$IDLETIME" ] && [ $((IDLETIME)) -gt 0 ]; then
         wr_ppp_opts "idle $IDLETIME"
      else
         wr_ppp_opts "idle 600"
      fi
   fi
   if [ -n "$IDLETIME" ] && [ $((IDLETIME)) -gt 0 ]; then
         wr_ppp_opts "idle $IDLETIME"
   fi

   if [ -z "$MTU_SIZE" ] || [ $((MTU_SIZE)) -le 0 ] ; then
      : # wr_ppp_opts "mtu 1460"
   else
      wr_ppp_opts "mtu $MTU_SIZE"
   fi

   [ "$local_ip" == "0.0.0.0" ] && local_ip=""
   [ "$remote_ip" == "0.0.0.0" ] && remote_ip=""
   if [ -n "$local_ip" ] || [ -n "$remote_ip" ]; then
      wr_ppp_opts "$local_ip:$remote_ip"
   fi

   if [ -z "$lcp_type" ] || [ "$lcp_type" == "$L2TP_LCP_TYPE_AUTO" ]; then
      if [ -n "$l2tpc_qos_enable" ] && [ "$l2tpc_qos_enable" != "0" ]; then
         wr_ppp_opts "lcp-echo-interval 2"
         wr_ppp_opts "lcp-echo-failure 90"
      else
         # WAN Type:
         #  16 -> LOCAL_WANTYPE_3G        0x10
         #  17 -> LOCAL_WANTYPE_IBURST    0x11
         #  21 -> LOCAL_WANTYPE_FLASHOFDM 0x15
         #  22 -> LOCAL_WANTYPE_S3G       0x16
         #  64 -> LOCAL_WANTYPE_PPPOE     0x40
         #  144 -> LOCAL_WANTYPE_DIALUP   0x90
         if [ -z "$wan_type" ]; then
            wr_ppp_opts "lcp-echo-interval 30"
            wr_ppp_opts "lcp-echo-failure 6"
         elif [ "$wan_type" == "16" ] || [ "$wan_type" == "17" ] ||
            [ "$wan_type" == "21" ] || [ "$wan_type" == "22" ] ||
            [ "$wan_type" == "64" ] || [ "$wan_type" == "144" ]; then
            wr_ppp_opts "lcp-echo-interval 2"
            wr_ppp_opts "lcp-echo-failure 90"
         else
            wr_ppp_opts "lcp-echo-interval 30"
            wr_ppp_opts "lcp-echo-failure 6"
         fi
      fi
   elif [ "$lcp_type" == "$L2TP_LCP_TYPE_MANUAL" ]; then
      if [ -z "$lcp_interval" ] || [ $((lcp_interval)) -le 0 ]; then
         lcp_interval="$C_L2TP_CLI_LCP_INTERVAL"
      fi

      if [ -z "$lcp_failure" ] || [ $((lcp_failure)) -le 0 ]; then
         lcp_failure="$C_L2TP_CLI_LCP_FAILURE"
      fi

      wr_ppp_opts "lcp-echo-interval $lcp_interval"
      wr_ppp_opts "lcp-echo-failure $lcp_failure"
   #elif [ "$lcp_type" == "$L2TP_LCP_TYPE_DISABLE" ]; then
   #   : # echo "Disable LCP Echo Request !"
   #else
   #   : # echo "Unknow LCP Echo Request Type !"
   fi

   #if [ -z "$PPP_PRIDNS" -o "$PPP_PRIDNS" == "0.0.0.0" ] && [ -z "$PPP_SECDNS" -o "$PPP_SECDNS" == "0.0.0.0" ]; then
   #   wr_ppp_opts "usepeerdns"
   #fi

   #echo "#!/bin/sh" > $up_script
   #echo "#!/bin/sh" > $down_script
   #if [ -f "/tmp/l2tp-action" ]; then
   #   echo "/tmp/l2tp-action ip-up \$*" >> $up_script
   #   echo "/tmp/l2tp-action ip-down \$*" >> $down_script
   #elif [ -f "/usr/bin/l2tp-action" ]; then
   #   echo "/usr/bin/l2tp-action ip-up \$*" >> $up_script
   #   echo "/usr/bin/l2tp-action ip-down \$*" >> $down_script
   #fi
   #chmod +x $up_script
   #chmod +x $down_script

   #wr_ppp_opts "ip-up $up_script"
   #wr_ppp_opts "ip-down $down_script"
   wr_ppp_opts "ipparam $linkname"

   # End of PPPD Config

   wr_conf "hide-avps no"
   wr_conf "retain-tunnel 0"
   wr_conf "persist 0"
   
   if [ -n "$HOLDOFFTIME" ] && [ $((HOLDOFFTIME)) -gt 0 ]; then
         wr_conf "holdoff $HOLDOFFTIME"
   else
         wr_conf "holdoff 3"
   fi
   if [ -n "$MAXFAIL" ] && [ $((MAXFAIL)) -gt 0 ]; then
         wr_conf "maxfail $MAXFAIL"
   else
         wr_conf "maxfail 1"
   fi
   #wr_conf "maxfail 1"
   #wr_conf "holdoff 3"
   if [ -n "$RWS" ] && [ $((RWS)) -gt 0 ]; then
         wr_conf "rws $RWS"
   fi
   if [ "$hostname" != "" ]; then
      wr_conf "hostname $hostname"
   #else
   #   wr_conf "hostname $romid"
   fi

   wr_conf ""
   wr_conf "section cmd"
   wr_conf "socket-path \"$l2tp_socket_file\""
   wr_conf ""
}
