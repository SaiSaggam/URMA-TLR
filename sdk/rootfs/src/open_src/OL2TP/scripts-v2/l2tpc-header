#!/bin/sh

[ -f "/usr/bin/scriptlib" ] && . /usr/bin/scriptlib

MAX_MULTIWAN="10"
WAN_LIST="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16"
MAX_TUNNEL="22"
TUN_LIST="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21"

check_kernel_mode() {
   local KERNEL_MODE="0"
   if [ -f "/lib/pppol2tp.so" ]; then
      KERNEL_MODE="1"
   fi
   return $KERNEL_MODE
}

check_kernel_version_2_6_36() {
   if [ "`uname -r | grep 2.6.36`" != "" ]; then
      return 1
   else
      return 0
   fi
}

check_used_listen_port() {
   local ConfigFiles="/etc/l2tp/*"
   local UDPPort="$1"

   if [ "`grep \"listen-port $UDPPort\" $ConfigFiles 2>/dev/null`" != "" ]; then
      return 1
   else
      return 0
   fi
}

check_exist_interface() {
   local ETH="$1"
   if [ "$ETH" != "" ] && [ "`ifconfig $ETH 2>&1 | grep Ethernet`" != "" ]; then
      return 1
   else
      return 0
   fi
}

# Read Wantype L2TP Configs
get_wantype_l2tp_config() {
   local HANDLE_RUSSIAN="/var/run/russian_p1wan_support"
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      C_L2TP_CNTTYPE="`rdcsman 0x00060900 u32`"
      C_L2TP_CNTTYPE_UI="`rdcsman 0x00060002 u32`"
      C_L2TP_NAT_DISABLE="`rdcsman 0x00060003 u32`"
      C_L2TP_RUSSIAN_MODE="0"
      C_L2TP_RUSSIAN_MODE_SUPPORT="0"
      if [ -f "$HANDLE_RUSSIAN" ]; then
         C_L2TP_RUSSIAN_MODE_SUPPORT="1"
         C_LOCAL_WANTYPE_RUSSIAN_MODE_DISABLE="`rdcsman 0x0001002B u32`"
         if [ "$C_LOCAL_WANTYPE_RUSSIAN_MODE_DISABLE" == "0" ]; then
            C_L2TP_RUSSIAN_MODE="1"
         fi
      fi
      C_L2TP_PHASE1_TYPE="`rdcsman 0x00060e00 u32`"
      if [ -z "$C_L2TP_PHASE1_TYPE" ] || [ "$C_L2TP_PHASE1_TYPE" == "0" ]; then
         C_PHASE1_TYPE_STR="DYNAMIC"
      else
         C_PHASE1_TYPE_STR="STATIC"
      fi
      C_L2TP_P1FIXED_IP="`rdcsman 0x00060300 ipv4`"
      C_L2TP_P1FIXED_NM="`rdcsman 0x00060400 ipv4`"
      C_L2TP_P1FIXED_GW="`rdcsman 0x00060500 ipv4`"
      C_L2TP_P1FIXED_PRIDNS="`rdcsman 0x00060700 ipv4`"
      C_L2TP_P1FIXED_SECDNS="`rdcsman 0x00060800 ipv4`"
      C_L2TP_LNS_SERVER="`rdcsman 0x00060600 str`"
      C_L2TP_LNS_SERVER_IP="$C_L2TP_LNS_SERVER"
      C_L2TP_AUTHTYPE="`rdcsman 0x00060d00 u32`"
      C_L2TP_HOLDOFFTIME="`rdcsman 0x00060c00 u32`" 
      C_L2TP_USER="`rdcsman 0x00060100 str`"
      C_L2TP_PASS="`rdcsman 0x00060200 str`"
      C_L2TP_MTU="`rdcsman 0x00060a00 u32`"
      C_L2TP_IDLETIME="`rdcsman 0x00060b00 u32`"
      C_L2TP_ENABLE_MPPE="`rdcsman 0x00064300 u32`"
      C_L2TP_ENABLE_MPPE_40="`rdcsman 0x00064301 u32`"
      C_L2TP_ENABLE_MPPE_56="`rdcsman 0x00064302 u32`"
      C_L2TP_ENABLE_MPPE_128="`rdcsman 0x00064303 u32`"
      C_L2TP_PRIDNS="`rdcsman 0x00064100 ipv4`"
      C_L2TP_SECDNS="`rdcsman 0x00064200 ipv4`"
   else
      C_L2TP_CNTTYPE="`rdcsman 0x0006290$TMP u32`"
      C_L2TP_CNTTYPE_UI="`rdcsman 0x0006291$TMP u32`"
      C_L2TP_NAT_DISABLE="`rdcsman 0x0006003$TMP u32`"
      C_L2TP_RUSSIAN_MODE="0"
      C_L2TP_RUSSIAN_MODE_SUPPORT="0"
      if [ -f "$HANDLE_RUSSIAN" ]; then
         C_L2TP_RUSSIAN_MODE_SUPPORT="1"
         C_LOCAL_WANTYPE_RUSSIAN_MODE_DISABLE="`rdcsman 0x0001002B u32`" # Undefine for Multiwan (Use LOCAL Version)
         if [ "$C_LOCAL_WANTYPE_RUSSIAN_MODE_DISABLE" == "0" ]; then
            C_L2TP_RUSSIAN_MODE="1"
         fi
      fi
      C_L2TP_PHASE1_TYPE="`rdcsman 0x00062e0$TMP u32`"
      if [ -z "$C_L2TP_PHASE1_TYPE" ] || [ "$C_L2TP_PHASE1_TYPE" == "0" ]; then
         C_PHASE1_TYPE_STR="DYNAMIC"
      else
         C_PHASE1_TYPE_STR="STATIC"
      fi
      C_L2TP_P1FIXED_IP="`rdcsman 0x0006230$TMP ipv4`"
      C_L2TP_P1FIXED_NM="`rdcsman 0x0006240$TMP ipv4`"
      C_L2TP_P1FIXED_GW="`rdcsman 0x0006250$TMP ipv4`"
      C_L2TP_P1FIXED_PRIDNS="`rdcsman 0x0006270$TMP ipv4`"
      C_L2TP_P1FIXED_SECDNS="`rdcsman 0x0006280$TMP ipv4`"
      C_L2TP_LNS_SERVER="`rdcsman 0x0006260$TMP str`"
      C_L2TP_LNS_SERVER_IP="$C_L2TP_LNS_SERVER"
      C_L2TP_AUTHTYPE="`rdcsman 0x00062d0$TMP u32`"
      C_L2TP_HOLDOFFTIME="`rdcsman 0x00062c0$TMP u32`" 
      C_L2TP_USER="`rdcsman 0x0006210$TMP str`"
      C_L2TP_PASS="`rdcsman 0x0006220$TMP str`"
      C_L2TP_MTU="`rdcsman 0x00062a0$TMP u32`"
      C_L2TP_IDLETIME="`rdcsman 0x00062b0$TMP u32`"
      C_L2TP_ENABLE_MPPE="`rdcsman 0x00064300 u32`" # Undefine for Multiwan (Use LOCAL Version)
      C_L2TP_ENABLE_MPPE_40="`rdcsman 0x00064301 u32`" # Undefine for Multiwan (Use LOCAL Version)
      C_L2TP_ENABLE_MPPE_56="`rdcsman 0x00064302 u32`" # Undefine for Multiwan (Use LOCAL Version)
      C_L2TP_ENABLE_MPPE_128="`rdcsman 0x00064303 u32`" # Undefine for Multiwan (Use LOCAL Version)
      C_L2TP_PRIDNS="`rdcsman 0x0006410$TMP1 ipv4`"
      C_L2TP_SECDNS="`rdcsman 0x0006420$TMP1 ipv4`"
   fi
}

get_port_config() {
   C_L2TP_PORT_DEFAULT="1702"
   C_L2TP_PORT="`rdcsman 0x00060f01 u32`"

   if [ -z "$C_L2TP_PORT" ] || [ $C_L2TP_PORT -le 0 ]; then
      C_L2TP_PORT="$C_L2TP_PORT_DEFAULT"
   fi

   local Times="0"
   local MaxRetry="$(($MAX_MULTIWAN+$MAX_TUNNEL))"
   while [ $Times -lt $MaxRetry ];
   do
      check_used_listen_port $C_L2TP_PORT
      [ "$?" == "0" ] && break
      if [ -z "$C_L2TP_PORT" ] || [ $C_L2TP_PORT -ge 65536 ]; then
         C_L2TP_PORT="$C_L2TP_PORT_DEFAULT"
      else
         C_L2TP_PORT="$((C_L2TP_PORT+1))"
      fi
      Times="$((Times+1))"
   done
}

get_local_config() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      C_LOCAL_WANTYPE="`rdcsman 0x00010003 u32`"
      C_LOCAL_HOSTNAME="`rdcsman 0x00010001 str`"
   else
      C_LOCAL_WANTYPE="`rdcsman 0x0001012$TMP u32`"
      C_LOCAL_HOSTNAME="`rdcsman 0x00010001 str`" # Undefine for Multiwan (Use LOCAL Version)
   fi
      C_LOCAL_AP_CNT_TYPE="`rdcsman 0x00010035 u32`"
}

get_lan_range() {
   C_LOCAL_LANIP="`rdcsman 0x00010004 ipv4`"
   C_LOCAL_LANNM="`rdcsman 0x00010005 ipv4`"

   local lan_ip_tmp="$C_LOCAL_LANIP"
   local lan_mask_tmp="$C_LOCAL_LANNM"

   local ip1=$((`echo $lan_ip_tmp| cut -d "." -f1` & `echo $lan_mask_tmp| cut -d "." -f1`))
   local ip2=$((`echo $lan_ip_tmp| cut -d "." -f2` & `echo $lan_mask_tmp| cut -d "." -f2`))
   local ip3=$((`echo $lan_ip_tmp| cut -d "." -f3` & `echo $lan_mask_tmp| cut -d "." -f3`))
   local ip4=$((`echo $lan_ip_tmp| cut -d "." -f4` & `echo $lan_mask_tmp| cut -d "." -f4`))

   eval $1="$ip1.$ip2.$ip3.$ip4"
   eval $2="$lan_mask_tmp"
}

get_3g_config() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      C_3G_MTU="`rdcsman 0x001e000b u32`"
   else
      C_3G_MTU="`rdcsman 0x001e20b$TMP u32`"
   fi
}

get_failover_config() {
   C_FAILOVER_LOADSHARING_ENABLE="`rdcsman 0x004301c0 u32`"
   C_3G_FAILOVER_MODE="`rdcsman 0x001e0080 u32`"
   C_FAILOVER_WANTYPE="`rdcsman 0x0043000b u32`"
   C_3G_AUTOBAK_ENABLE="`rdcsman 0x001e000d u32`"
}

# Read L2TP Client Configs
get_l2tpc_config() {
   C_L2TP_CLI_ENABLE="`rdcsman 0x00061000 u32`"
   C_L2TP_CLI_QOS_ENABLE="`rdcsman 0x00061001 u32`"
   # C_L2TP_CLI_DETECT_LNS="`rdcsman 0x00061002 u32`"
}

get_l2tpc_tunnel_config() {
   local IDX="$1"
   local TUN_IDX="`printf %02X $((IDX))`"

   C_L2TP_CLI_USER_ENABLE="`rdcsman 0x000611$TUN_IDX u32`"
   C_L2TP_CLI_TUNLNAME="`rdcsman 0x000612$TUN_IDX str`"
   C_L2TP_CLI_PEERIP="`rdcsman 0x000613$TUN_IDX ipv4`"
   C_L2TP_CLI_USER="`rdcsman 0x000614$TUN_IDX str`"
   C_L2TP_CLI_PASSWORD="`rdcsman 0x000615$TUN_IDX str`"
   C_L2TP_CLI_ROUTE="`rdcsman 0x000616$TUN_IDX str`"
   C_L2TP_CLI_CONNECT_TYPE="`rdcsman 0x000617$TUN_IDX u32`"
   C_L2TP_CLI_MPPE="`rdcsman 0x000618$TUN_IDX u32`"
   C_L2TP_CLI_NAT="`rdcsman 0x000619$TUN_IDX u32`"
   # C_L2TP_CLI_ACTIVE="`rdcsman 0x00061a$TUN_IDX u32`"
   C_L2TP_CLI_PEERIP_STR="`rdcsman 0x00061b$TUN_IDX str`"
   C_L2TP_CLI_CCP_ENABLE="`rdcsman 0x00061a$TUN_IDX u32`"
   C_L2TP_CLI_DO_AUTH="`rdcsman 0x00061d$TUN_IDX u32`"
   C_L2TP_CLI_AUTH_PAP="`rdcsman 0x00061e$TUN_IDX u32`"
   C_L2TP_CLI_AUTH_CHAP="`rdcsman 0x00061f$TUN_IDX u32`"
   C_L2TP_CLI_AUTH_MSCHAP="`rdcsman 0x000630$TUN_IDX u32`"
   C_L2TP_CLI_AUTH_MSCHAPV2="`rdcsman 0x000631$TUN_IDX u32`"
   C_L2TP_CLI_LOCAL_IP="`rdcsman 0x000632$TUN_IDX ipv4`"
   C_L2TP_CLI_REMOTE_IP="`rdcsman 0x000633$TUN_IDX ipv4`"
   C_L2TP_CLI_LCP_TYPE="`rdcsman 0x000634$TUN_IDX u32`"
   C_L2TP_CLI_LCP_INTERVAL="`rdcsman 0x000635$TUN_IDX u32`"
   C_L2TP_CLI_LCP_FAILURE="`rdcsman 0x000636$TUN_IDX u32`"
   C_L2TP_CLI_IDLETIME="`rdcsman 0x000637$TUN_IDX u32`"
   C_L2TP_CLI_HOLDOFFTIME="`rdcsman 0x000660$TUN_IDX u32`"
   C_L2TP_CLI_MAX_FAIL="`rdcsman 0x000661$TUN_IDX u32`"
   C_L2TP_CLI_RWS="`rdcsman 0x000662$TUN_IDX u32`"
   C_L2TP_CLI_TUN_PASSWORD="`rdcsman 0x00063D$TUN_IDX str`"
   C_L2TP_CLI_PORT="`rdcsman 0x00063C$TUN_IDX u32`"
   C_L2TP_CLI_WAN="`rdcsman 0x00063E$TUN_IDX u32`"
   C_L2TP_CLI_LNS_PORT="`rdcsman 0x00063F$TUN_IDX u32`"
   C_L2TP_CLI_OVER_IPSEC_ENABLE="`rdcsman 0x00063B$TUN_IDX u32`"
}

# Read Wantype Related Status
get_sys_rom_info() {
   # local MULTIWAN="$1"

   S_SYS_INFO_ROM_ID="`rdcsman 0x80004210 str`"
   S_SYS_INFO_ROM_ID_CUSTOMER_INFO="`expr substr $S_SYS_INFO_ROM_ID 1 3`"
}

get_phase1_dhcp_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"

   if [ -z "$MULTIWAN" ]; then
      S_DHCP_CLI_IF_GW="`rdcsman 0x80035004 ipv4`"
      S_DHCP_CLI_IF_PRIDNS="`rdcsman 0x80035005 ipv4`"
      S_DHCP_CLI_IF_SECDNS="`rdcsman 0x80035006 ipv4`"
      S_DHCP_CLI_CNT_STATUS="`rdcsman 0x80035007 u32`"
   else
      S_DHCP_CLI_IF_GW="`rdcsman 0x8003513$TMP ipv4`"
      S_DHCP_CLI_IF_PRIDNS="`rdcsman 0x8003514$TMP ipv4`"
      S_DHCP_CLI_IF_SECDNS="`rdcsman 0x8003515$TMP ipv4`"
      S_DHCP_CLI_CNT_STATUS="`rdcsman 0x8003516$TMP u32`"
   fi
}

get_phase1_static_status() {
   local MULTIWAN="$1"

   if [ -z "$MULTIWAN" ]; then
      S_FIX_CNT_STATUS="`rdcsman 0x80110004 u32`"
   else
      S_FIX_CNT_STATUS="`rdcsman 0x80110004 u32`" # Undefine for Multiwan (Use LOCAL Version)
   fi
}

get_wan_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP2="`printf %X $((MULTIWAN+2))`"

   #S_SYS_IF_WAN0="`rdcsman 0x8000F361 str`"
   #S_SYS_IF_WAN1="`rdcsman 0x8000F362 str`"
   if [ -z "$MULTIWAN" ]; then   
	   S_SYS_IF_WAN="`rdcsman 0x8000F361 str`"
   else
	   S_SYS_MULTIWAN_IF_WAN="`rdcsman 0x8000F36$TMP2 str`"
   fi
}

get_l2tp_cnt_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ] ; then
      S_L2TP_CNT_STATUS="`rdcsman 0x80060700 u32`"
   else
      S_L2TP_CNT_STATUS="`rdcsman 0x8006270$TMP u32`"
   fi
}

get_l2tp_cnt_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ] ; then
      S_L2TP_CNT_TIME="`rdcsman 0x80060100 u32`"
      S_L2TP_IF_IP="`rdcsman 0x80060200 ipv4`"
      S_L2TP_IF_NM="`rdcsman 0x80060300 ipv4`"
      S_L2TP_IF_GW="`rdcsman 0x80060400 ipv4`"
      S_L2TP_IF_PRIDNS="`rdcsman 0x80060500 ipv4`"
      S_L2TP_IF_SECDNS="`rdcsman 0x80060600 ipv4`"
      S_L2TP_IF_NAME="`rdcsman 0x80063000 str`"
   else
      S_L2TP_CNT_TIME="`rdcsman 0x8006210$TMP u32`"
      S_L2TP_IF_IP="`rdcsman 0x8006220$TMP ipv4`"
      S_L2TP_IF_NM="`rdcsman 0x8006230$TMP ipv4`"
      S_L2TP_IF_GW="`rdcsman 0x8006240$TMP ipv4`"
      S_L2TP_IF_PRIDNS="`rdcsman 0x8006250$TMP ipv4`"
      S_L2TP_IF_SECDNS="`rdcsman 0x8006260$TMP ipv4`"
      S_L2TP_IF_NAME="`rdcsman 0x80062b0$TMP str`"
   fi
}

get_local_cnt_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ] ; then
      S_LOCAL_WAN_STATUS="`rdcsman 0x80010007 u32`"
   else
      S_LOCAL_WAN_STATUS="`rdcsman 0x8001016$TMP u32`"
   fi
}

get_local_cnt_force_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"

   if [ -z "$MULTIWAN" ]; then
      S_LOCAL_WAN_CNT_FORCE="`rdcsman 0x8001000E u32`"
   else
      S_LOCAL_WAN_CNT_FORCE="`rdcsman 0x800101C$TMP u32`"
   fi
}

get_local_cnt_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"

   if [ -z "$MULTIWAN" ]; then
      S_LOCAL_CNT_TIME="`rdcsman 0x8001000c u32`"
      S_LOCAL_WAN_IP="`rdcsman 0x80010002 ipv4`"
      S_LOCAL_WAN_NM="`rdcsman 0x80010003 ipv4`"
      S_LOCAL_WAN_GW="`rdcsman 0x80010004 ipv4`"
      S_LOCAL_WAN_PRIDNS="`rdcsman 0x80010005 ipv4`"
      S_LOCAL_WAN_SECDNS="`rdcsman 0x80010006 ipv4`"
      S_LOCAL_WAN_IF_NAME="`rdcsman 0x8001000B str`"
   else
      S_LOCAL_CNT_TIME="`rdcsman 0x800101A$TMP u32`"
      S_LOCAL_WAN_IP="`rdcsman 0x8001011$TMP ipv4`"
      S_LOCAL_WAN_NM="`rdcsman 0x8001012$TMP ipv4`"
      S_LOCAL_WAN_GW="`rdcsman 0x8001013$TMP ipv4`"
      S_LOCAL_WAN_PRIDNS="`rdcsman 0x8001014$TMP ipv4`"
      S_LOCAL_WAN_SECDNS="`rdcsman 0x8001015$TMP ipv4`"
      S_LOCAL_WAN_IF_NAME="`rdcsman 0x8001019$TMP str`"
   fi
}

get_3g_cnt_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      S_3G_IF_GW="`rdcsman 0x801e0400 ipv4`"
   else
      S_3G_IF_GW="`rdcsman 0x801e040$TMP1 ipv4`"
   fi
}

get_failover_cnt_status() {
   S_FAILOVER_STATUS="`rdcsman 0x80430600 u32`"
   S_3G_AUTOBAK_MODE="`rdcsman 0x801e4000 u32`"
   S_3G_AUTOBAK_STATUS="`rdcsman 0x801e1200 u32`"
   S_FLASHOFDM_IF_GW="`rdcsman 0x80395004 u32`"
}

get_failover_cnt_info() {
   S_FAILOVER_CNT_TIME="`rdcsman 0x8043000c u32`"
   S_FAILOVER_WAN_IP="`rdcsman 0x80430002 ipv4`"
   S_FAILOVER_WAN_NM="`rdcsman 0x80430003 ipv4`"
   S_FAILOVER_WAN_GW="`rdcsman 0x80430004 ipv4`"
   S_FAILOVER_WAN_PRIDNS="`rdcsman 0x80430005 ipv4`"
   S_FAILOVER_WAN_SECDNS="`rdcsman 0x80430006 ipv4`"
   S_FAILOVER_WAN_IF_NAME="`rdcsman 0x8043000b str`"
}

# Read L2TP Client Status
get_l2tpc_cnt_status() {
   local IDX="$1"
   local TUN_IDX="`printf %02X $((IDX))`"

   S_L2TP_CLI_PEER_CNT_STATUS="`rdcsman 0x800610$TUN_IDX u32`"
}

get_l2tpc_cnt_info() {
   local IDX="$1"
   local TUN_IDX="`printf %02X $((IDX))`"
   local TUN_IDX_T2="`printf %02X $((IDX+2))`"

   # S_L2TP_CLI_PEER_USER="`rdcsman 0x800621$TUN_IDX str`"
   # S_L2TP_CLI_PEER_REAL_IP="`rdcsman 0x800622$TUN_IDX ipv4`"
   S_L2TP_CLI_PEER_VIRTUAL_IP="`rdcsman 0x80060c$TUN_IDX ipv4`"
   S_L2TP_CLI_PEER_PID="`rdcsman 0x80060b$TUN_IDX u32`"
   S_L2TP_CLI_PEER_IFNAME="`rdcsman 0x80060e$TUN_IDX str`"
   S_L2TP_CLI_PEER_REMOTE_IP="`rdcsman 0x80060d$TUN_IDX ipv4`"
   S_L2TP_CLI_PEER_CONNT_ID="`rdcsman 0x800600$TUN_IDX_T2 u32`"
   # S_L2TP_CLI_PEER_CONNT_TYPE="`rdcsman 0x800628$TUN_IDX u32`"
}

get_routing_restart_flag() {
   S_ROUTING_RESTART_FLAG="`rdcsman 0x80130003 u32`"
}

# Write Wantype Related Status
write_l2tp_cnt_status() {
   local CNTSTATUS="$1"
   local MULTIWAN="$2"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_L2TP_CNT_STATUS
      wrcsman "0x80060700 $CNTSTATUS"
   else
      # S_L2TP_MULTIWAN_CNT_STATUS
      wrcsman "0x8006270$TMP $CNTSTATUS"
   fi
}

write_l2tp_cnt_info() {
   local CNTTIME="$1"
   local IF_IP="$2"
   local IF_NM="$3"
   local IF_GW="$4"
   local IF_DNS1="$5"
   local IF_DNS2="$6"
   local PPP_IF="$7"
   local MULTIWAN="$8"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_L2TP_CNT_TIME, S_L2TP_IF_IP, S_L2TP_IF_NM, S_L2TP_IF_GW,
      # S_L2TP_IF_PRIDNS, S_L2TP_IF_SECDNS, S_L2TP_IF_NAME
      wrcsman "0x80060100 $CNTTIME && \
               0x80060200 {$IF_IP} && \
               0x80060300 {$IF_NM} && \
               0x80060400 {$IF_GW} && \
               0x80060500 {$IF_DNS1} && \
               0x80060600 {$IF_DNS2} && \
               0x80063000 \"$PPP_IF"
   else
      # S_L2TP_MULTIWAN_CNT_TIME, S_L2TP_MULTIWAN_IF_IP, S_L2TP_MULTIWAN_IF_NM, S_L2TP_MULTIWAN_IF_GW,
      # S_L2TP_MULTIWAN_IF_PRIDNS, S_L2TP_MULTIWAN_IF_SECDNS, S_L2TP_MULTIWAN_IF_NAME
      wrcsman "0x8006210$TMP $CNTTIME && \
               0x8006220$TMP {$IF_IP} && \
               0x8006230$TMP {$IF_NM} && \
               0x8006240$TMP {$IF_GW} && \
               0x8006250$TMP {$IF_DNS1} && \
               0x8006260$TMP {$IF_DNS2} && \
               0x80062b0$TMP \"$PPP_IF"
   fi
}

write_local_cnt_status() {
   local STATUS="$1"
   local MULTIWAN="$2"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_WAN_STATUS
      wrcsman "0x80010007 $STATUS"
   else
      # S_LOCAL_MULTIWAN_STATUS
      wrcsman "0x8001016$TMP $STATUS"
   fi
}

write_local_cnt_force_status() {
   local CNT_FORCE_STATUS="$1"
   local MULTIWAN="$2"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_WAN_CNT_FORCE
      wrcsman "0x8001000e $CNT_FORCE_STATUS"
   else
      # S_LOCAL_MULTIWAN_CNT_FORCE
      wrcsman "0x800101C$TMP $CNT_FORCE_STATUS"
   fi
}

write_local_cnt_info() {
   local CNTTIME="$1"
   local IF_IP="$2"
   local IF_NM="$3"
   local IF_GW="$4"
   local IF_DNS1="$5"
   local IF_DNS2="$6"
   local PPP_IF="$7"
   local MULTIWAN="$8"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_CNT_TIME, S_LOCAL_WAN_IP, S_LOCAL_WAN_NM, S_LOCAL_WAN_GW,
      # S_LOCAL_WAN_PRIDNS, S_LOCAL_WAN_SECDNS, S_LOCAL_WAN_IF_NAME
      wrcsman "0x8001000c $CNTTIME && \
               0x80010002 {$IF_IP} && \
               0x80010003 {$IF_NM} && \
               0x80010004 {$IF_GW} && \
               0x80010005 {$IF_DNS1} && \
               0x80010006 {$IF_DNS2} && \
               0x8001000B \"$PPP_IF"
   else
      # S_LOCAL_MULTIWAN_CNT_TIME, S_LOCAL_MULTIWAN_IP, S_LOCAL_MULTIWAN_NM, S_LOCAL_MULTIWAN_GW,
      # S_LOCAL_MULTIWAN_PRIDNS, S_LOCAL_MULTIWAN_SECDNS, S_LOCAL_MULTIWAN_IF_NAME
      wrcsman "0x800101A$TMP $CNTTIME && \
               0x8001011$TMP {$IF_IP} && \
               0x8001012$TMP {$IF_NM} && \
               0x8001013$TMP {$IF_GW} && \
               0x8001014$TMP {$IF_DNS1} && \
               0x8001015$TMP {$IF_DNS2} && \
               0x8001019$TMP \"$PPP_IF"
   fi
}

write_failover_cnt_status() {
   local STATUS="$1"

   # S_FAILOVER_STATUS
   wrcsman "0x80430600 $STATUS"
}

write_failover_cnt_info() {
   local CNTTIME="$1"
   local IF_IP="$2"
   local IF_NM="$3"
   local IF_GW="$4"
   local IF_DNS1="$5"
   local IF_DNS2="$6"
   local PPP_IF="$7"

   # S_FAILOVER_CNT_TIME, S_FAILOVER_WAN_IP, S_FAILOVER_WAN_NM, S_FAILOVER_WAN_GW,
   # S_FAILOVER_WAN_PRIDNS, S_FAILOVER_WAN_SECDNS, S_FAILOVER_WAN_IF_NAME
   wrcsman "0x8043000c $CNTTIME && \
            0x80430002 {$IF_IP} && \
            0x80430003 {$IF_NM} && \
            0x80430004 {$IF_GW} && \
            0x80430005 {$IF_DNS1} && \
            0x80430006 {$IF_DNS2} && \
            0x8043000b \"$PPP_IF"
}

# Write L2TP Client Status
write_l2tpc_cnt_status() {
   local STATUS="$1"
   local IDX="$2"
   local TUN_IDX="`printf %02X $((IDX))`"

   # S_L2TP_CLI_PEER_CNT_STATUS
   wrcsman "0x800610$TUN_IDX $STATUS"
}

write_l2tpc_pid_info() {
   local PID="$1"
   local IDX="$2"
   local TUN_IDX="`printf %02X $((IDX))`"

   # S_L2TP_CLI_PEER_PID
   wrcsman "0x80060b$TUN_IDX $PID"
}

write_routing_restart_flag() {
   local ROUTING_RESTART_FLAG="$1"

   # S_ROUTING_RESTART_FLAG
   wrcsman "0x80130003 $ROUTING_RESTART_FLAG"
}

write_l2tpc_cnt_info() {
   local PID="$1"
   local IFNAME="$2"
   local VIRTUAL_IP="$3"
   local REMOTE_IP="$4"
   local IDX="$5"
   local TUN_IDX="`printf %02X $((IDX))`"

   # S_L2TP_CLI_PEER_PID, S_L2TP_CLI_PEER_IFNAME,
   # S_L2TP_CLI_PEER_VIRTUAL_IP, S_L2TP_CLI_PEER_REMOTE_IP
   wrcsman "0x80060b$TUN_IDX $PID && \
            0x80060e$TUN_IDX \"$IFNAME && \
            0x80060c$TUN_IDX {$VIRTUAL_IP} && \
            0x80060d$TUN_IDX {$REMOTE_IP}"
}

# Write L2TP Client Config
write_l2tpc_peerip_info() {
   local PEERIP="$1"
   local IDX="$2"
   local TUN_IDX="`printf %02X $((IDX))`"

   # C_L2TP_CLI_PEERIP
   wrcsman "0x000613$TUN_IDX {$PEERIP}"
}

# Clear Status
clear_l2tp_cnt_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_L2TP_CNT_STATUS
      wrcsman "0x80060700 0x00"
   else
      # S_L2TP_MULTIWAN_CNT_STATUS
      wrcsman "0x8006270$TMP 0x00"
   fi
}

clear_l2tp_cnt_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_L2TP_CNT_TIME, S_L2TP_IF_IP, S_L2TP_IF_NM, S_L2TP_IF_GW,
      # S_L2TP_IF_PRIDNS, S_L2TP_IF_SECDNS, S_L2TP_IF_NAME
      wrcsman "0x80060100 0x00 && \
               0x80060200 {0.0.0.0} && \
               0x80060300 {0.0.0.0} && \
               0x80060400 {0.0.0.0} && \
               0x80060500 {0.0.0.0} && \
               0x80060600 {0.0.0.0} && \
               0x80063000 \""
   else
      # S_L2TP_MULTIWAN_CNT_TIME, S_L2TP_MULTIWAN_IF_IP, S_L2TP_MULTIWAN_IF_NM, S_L2TP_MULTIWAN_IF_GW,
      # S_L2TP_MULTIWAN_IF_PRIDNS, S_L2TP_MULTIWAN_IF_SECDNS, S_L2TP_MULTIWAN_IF_NAME
      wrcsman "0x8006210$TMP 0x00 && \
               0x8006220$TMP {0.0.0.0} && \
               0x8006230$TMP {0.0.0.0} && \
               0x8006240$TMP {0.0.0.0} && \
               0x8006250$TMP {0.0.0.0} && \
               0x8006260$TMP {0.0.0.0} && \
               0x80062b0$TMP \""
   fi
}

clear_local_cnt_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_WAN_STATUS
      wrcsman "0x80010007 0x00"
   else
      # S_LOCAL_MULTIWAN_STATUS
      wrcsman "0x8001016$TMP 0x00"
   fi
}

clear_local_cnt_force_status() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_WAN_CNT_FORCE
      wrcsman "0x8001000e 0x00"
   else
      # S_LOCAL_MULTIWAN_CNT_FORCE
      wrcsman "0x800101C$TMP 0x00"
   fi
}

clear_local_cnt_info() {
   local MULTIWAN="$1"
   local TMP="`printf %X $((MULTIWAN))`"
   local TMP1="`printf %X $((MULTIWAN+1))`"

   if [ -z "$MULTIWAN" ]; then
      # S_LOCAL_WAN_IP, S_LOCAL_WAN_NM, S_LOCAL_WAN_GW,
      # S_LOCAL_WAN_PRIDNS, S_LOCAL_WAN_SECDNS, S_LOCAL_WAN_IF_NAME
      wrcsman "0x8001000c 0x00 && \
               0x80010002 {0.0.0.0} && \
               0x80010003 {0.0.0.0} && \
               0x80010004 {0.0.0.0} && \
               0x80010005 {0.0.0.0} && \
               0x80010006 {0.0.0.0} && \
               0x8001000B \""
   else
      # S_LOCAL_MULTIWAN_CNT_TIME, S_LOCAL_MULTIWAN_IP, S_LOCAL_MULTIWAN_NM, S_LOCAL_MULTIWAN_GW,
      # S_LOCAL_MULTIWAN_PRIDNS, S_LOCAL_MULTIWAN_SECDNS, S_LOCAL_MULTIWAN_IF_NAME
      wrcsman "0x800101A$TMP 0x00 && \
               0x8001011$TMP {0.0.0.0} && \
               0x8001012$TMP {0.0.0.0} && \
               0x8001013$TMP {0.0.0.0} && \
               0x8001014$TMP {0.0.0.0} && \
               0x8001015$TMP {0.0.0.0} && \
               0x8001019$TMP \""
   fi
}

clear_failover_cnt_status() {
   # S_FAILOVER_STATUS
   wrcsman "0x80430600 0"
}

clear_failover_cnt_info() {
   # S_FAILOVER_CNT_TIME, S_FAILOVER_WAN_IP, S_FAILOVER_WAN_NM, S_FAILOVER_WAN_GW,
   # S_FAILOVER_WAN_PRIDNS, S_FAILOVER_WAN_SECDNS, S_FAILOVER_WAN_IF_NAME
   wrcsman "0x8043000c 0x00 && \
            0x80430002 {0.0.0.0} && \
            0x80430003 {0.0.0.0} && \
            0x80430004 {0.0.0.0} && \
            0x80430005 {0.0.0.0} && \
            0x80430006 {0.0.0.0} && \
            0x8043000b \""
}

# Clear L2TP Client Status
clear_l2tpc_cnt_info() {
   local IDX="$1"
   local TUN_IDX="`printf %02X $((IDX))`"

   # S_L2TP_CLI_PEER_PID, S_L2TP_CLI_PEER_IFNAME,
   # S_L2TP_CLI_PEER_VIRTUAL_IP, S_L2TP_CLI_PEER_REMOTE_IP
   wrcsman "0x80060b$TUN_IDX 0x00 && \
            0x80060e$TUN_IDX \" && \
            0x80060c$TUN_IDX {0.0.0.0} && \
            0x80060d$TUN_IDX {0.0.0.0}"
}
