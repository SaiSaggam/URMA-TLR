
IFCONFIG="/sbin/ifconfig"
ROUTE="/sbin/route -n"
IP2NET="/usr/bin/ip2net"

RESOLV_CONF="/etc/resolv.conf"
PPP_RESOLV_CONF="/etc/ppp/resolv.conf"

sl_get_DNS_in_resolv_conf()
{
	local _DNS1 _DNS2 CFG got cnt s 
	
	if [ -f $PPP_RESOLV_CONF ] ; then
		CFG=`cat $PPP_RESOLV_CONF`
	elif [ -f $RESOLV_CONF ] ; then		
		CFG=`cat $RESOLV_CONF`
	else
		return 1	
	fi	
	
	got=0
	cnt=0
	for s in $CFG
	do
   		if [ $got -eq 1 ] ; then        
    		[ $cnt = 0 ] && _DNS1=$s
    		[ $cnt = 1 ] && _DNS2=$s
       		cnt=$(($cnt+1)) 	
    		got=0
    		continue       	
   		fi

   		if [ $s = "nameserver" ] ; then
       		got=1
   		fi
	done
	
	eval $1=$_DNS1
	eval $2=$_DNS2
	return 0	
}

sl_get_IP_NM_GW_in_ifconfig()
{
	local _IP _NM _GW CFG stt s CHK_IP CHK_GW
	
	[ -z $1 ] && return 1
	
	CFG=`$IFCONFIG $1`
	_GW=""
	stt=0
	for s in $CFG
	do
	    if [ $stt -ge 1 -a $stt -le 3 ]
	    then
	        case ${s%%:*} in
		        "addr")  _IP=${s##*:};;
		        "Mask")  _NM=${s##*:};;
		        "P-t-P") _GW=${s##*:};;
	        esac
	        stt=$(($stt+1))
	        continue
	    fi
	
	    if [ "$s" = "inet" ]
	    then
	        stt=1
	    fi
	done
	
	if [ -n $_IP -a -n $_NM ] ; then
		CHK_IP=`$IP2NET $_IP $_NM`
	fi

	if [ -z $_GW ] ; then
		CFG=`$ROUTE`
        stt=0
        for s in $CFG
		do
			if [ $stt = 1 ] ; then
				_GW=$s
					
				if [ -n $_GW -a -n $_NM ] ; then
					CHK_GW=`$IP2NET $_GW $_NM`
				fi
				
				if [ -n $_IP -a -n $_GW -a -n $_NM ] ; then
					if [ $CHK_IP = $CHK_GW ] ; then
						break
					fi
				else
					break		 
				fi
			fi

            if [ $s = "default" -o $s = "0.0.0.0" ] ; then
                stt=1
			else
				stt=0
            fi       
        done         
	fi
	
	eval $2=$_IP
	eval $3=$_NM
	eval $4=$_GW	
	
	return 0
}


sl_get_PPP_interface_name()
{
	local i _PID _PPP_IF

	for i in /var/run/ppp*.pid ; do
    	if [ -r $i ] ; then
			_PID=`cat $i`
			if [ "$_PID" = "$1" ] ; then
				_PPP_IF=${i##/*/}
				_PPP_IF=${_PPP_IF%%.*}
				
				eval $2=$_PPP_IF
				return 0		
	    	fi	 
	   	fi
	done	
	return 1
	
}

sl_get_ppp_PID_IFname()
{
	local CFG s cnt _PPP_PID _PPP_IF
	
	if [ -r $1 ] ; then  
		
		CFG=`cat $1`
		cnt=0
		for s in $CFG	
		do
			[ $cnt = 0 ] && _PPP_PID=$s
			[ $cnt = 1 ] && _PPP_IF=$s
			cnt=$(($cnt+1)) 
		done
		
		eval $2=$_PPP_PID
		eval $3=$_PPP_IF 
		
		return 0	
	else
		return 1
	fi	
}

sl_get_MPPP_PID_session()
{
	local i _PID _PPP_S_NO

	for i in /var/run/mpppoe*.pid.pppd ; do
    	if [ -r $i ] ; then
			_PID=`cat $i`
			if [ "$_PID" = "$1" ] ; then
				_PPP_S_NO=${i##/*/}
				_PPP_S_NO=${_PPP_S_NO%%.*}
				_PPP_S_NO=${_PPP_S_NO##mpppoe}
				
				eval $2=$_PPP_S_NO
				return 0		
	    		fi	 
	fi
	
	done	
	return 1
}

sl_get_uptime()
{
	local s CFG
	CFG=`cat /proc/uptime`
	for s in $CFG
	do
		s=${s%%.*}
		eval $1=$s
		return 0 
	done
}		

get_csid_addr()
{
    local addr="$1"
    local pre_addr="`expr substr $addr 1 6`"
    local post_addr="0x1""`expr substr $addr 7 4`"

    local idx="$2" ; [ "$idx" = "" ] && idx="0"
    post_addr="`echo $post_addr $idx | awk '{printf("%x",($1+$2))}'`"
    post_addr="`expr substr $post_addr 2 4`"
    echo $pre_addr $post_addr | awk '{printf("%s%s",$1,$2)}'  
}

sl_get_csid()
{
    local addr="$1"
    local pre_addr="`expr substr $addr 1 6`"
    local post_addr="0x1""`expr substr $addr 7 4`"

    local idx=""
    [ "$3" = "" ] && idx="0" || idx="$2"                    
    post_addr="`echo $post_addr $idx | awk '{printf("%x",($1+$2))}'`"
    post_addr="`expr substr $post_addr 2 4`"
    local ret="`echo $pre_addr $post_addr | awk '{printf("%s%s",$1,$2)}'`"    
    [ "$3" = "" ] && eval $2="$ret" || eval $3="$ret"  
} 

sl_prefix_to_mask() 
{
    local in=$1
    local ret=""
    for i in 1 2 3 4 ; do
        if [ $in -eq 0 ]; then
            [ $i -eq 4 ] && ret="$ret'0'" || ret="$ret'0.'"
        elif [ $in -ge 8 ]; then
            [ $i -eq 4 ] && ret="$ret'255'" || ret="$ret'255.'"
            in=$((in-8))
        else
            local sum=0; 
            local j=0;
            while [ ture ]; do
                #echo sum:$sum in:$in j:$j add:$((1<<(7-j)))
                [ $j -ge $in ] && break;
                tmp=$((1<<(7-j)))
                sum=$((tmp + sum))
                j=$((j+1))
            done
            [ $i -eq 4 ] && ret="$ret$sum" || ret="$ret$sum."
            in=0
        fi
    done
    eval $2="$ret"
}  

# Input : Original file
# Output: Uniq file output
sl_uniq_file()
{
    [ ! -e "$1" ] && touch $1 
    local rand="`date +%s`"
    awk '!x[$0]++' $1 > $1.$rand
    mv $1.$rand $1  
}

# $1: file
# $2: append content
sl_append_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return

    local conf="$1"    
    [ ! -e $conf ] && touch $conf
    shift
           
    for data in $* ; do
        #echo $data
        [ "$data" != "" ] && echo "$data" >> $conf
    done
    sl_uniq_file $conf
}        

# $1: file
# $2: insert content
sl_insert_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return

    local conf="$1"    
    [ ! -e $conf ] && touch $conf
    shift
           
    local rand="`date +%s`"    
    for data in $* ; do
        #echo $data
        [ "$data" != "" ] && echo "$data" >> $conf.$rand
    done
    cat $conf >> $conf.$rand 
    sl_uniq_file $conf.$rand
    mv $conf.$rand $conf
}    

# Input:
# sl_append_dns_file 8.8.8.8 8.8.4 ...
# 
# Output:
# #cat /etc/resolv.conf or /etc/ppp/resolv.conf
# nameserver X.X.X.X # original 
# nameserver 8.8.8.8   
# nameserver 8.8.4.4
# ...  
sl_append_dns_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return

    local conf="$1"    
    [ ! -e $conf ] && touch $conf
    shift   

    for data in $* ; do
        #echo $data
        [ "$data" != "" ] && echo "nameserver $data" >> $conf
    done
    sl_uniq_file $conf
}
 
# Input:
# sl_insert_dns_file /etc/resolv.conf 8.8.8.8 8.8.4 ...
# 
# Output:
# #cat /etc/resolv.conf or /etc/ppp/resolv.conf
# nameserver 8.8.8.8   
# nameserver 8.8.4.4
# nameserver X.X.X.X # original 
# ...  
sl_insert_dns_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return
    local conf="$1"    
    [ ! -e $conf ] && touch $conf 
    shift   

    local rand="`date +%s`"    
    for data in $* ; do
        #echo $data
        [ "$data" != "" ] && echo "nameserver $data" >> $conf.$rand
    done
    cat $conf >> $conf.$rand 
    sl_uniq_file $conf.$rand
    mv $conf.$rand $conf
}                

# Input:
# sl_append_secrets_file user1 passwd1 user2 passwd2 ...
# 
# Output:
# #cat /etc/ppp/chap-secrets or /etc/ppp/pap-secrets
# userX * passwdX * # original 
# user1 * passwd1 *   
# user2 * passwd2 *   
# ...
sl_append_secrets_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return

    local secret1="/etc/ppp/pap-secrets"    
    local secret2="/etc/ppp/chap-secrets"    
 
    local i="0"
    while [ $# -gt 0 ]; do
        data_="$1"            
        if [ "$i" == "0" ]; then
            data="\"$data_\" * "
            i="1"
            shift
            continue
        else 
            data="$data \"$data_\" *"
            i="0"
            shift
        fi
        #echo $data
        [ "$data" != "" ] && echo "$data" >> $secret1
        [ "$data" != "" ] && echo "$data" >> $secret2
    done
    sl_uniq_file $secret1
    sl_uniq_file $secret2
}       

# Input:
# sl_insert_secrets_file user1 passwd1 user2 passwd2 ...
# 
# Output:
# #cat /etc/ppp/chap-secrets or /etc/ppp/pap-secrets
# user1 * passwd1 *   
# user2 * passwd2 *   
# userX * passwdX * # original 
# ...
sl_insert_secrets_file()
{
    [ $# -le 1 ] && echo "Parameters isn't enough !" && return

    local secret1="/etc/ppp/pap-secrets"    
    local secret2="/etc/ppp/chap-secrets"    
    local rand="`date +%s`"    
    local i="0"
    while [ $# -gt 0 ]; do
        data_="$1"            
        if [ "$i" == "0" ]; then
            data="\"$data_\" * "
            i="1"
            shift                
            continue
        else 
            data="$data \"$data_\" *"
            i="0"
            shift                
        fi
        [ "$data" != "" ] && echo "$data" >> $secret1.$rand
        [ "$data" != "" ] && echo "$data" >> $secret2.$rand
    done
    cat $secret1 >> $secret1.$rand 
    sl_uniq_file $secret1.$rand
    mv $secret1.$rand $secret1

    cat $secret2 >> $secret2.$rand 
    sl_uniq_file $secret2.$rand
    mv $secret2.$rand $secret2
}       
       
#
# ex. 255.255.255.0 -> 24
#
sl_netmask_to_prefix()
{
    local mask="$1"
    nm1="`echo $mask|cut -d. -f1`"
    nm2="`echo $mask|cut -d. -f2`"
    nm3="`echo $mask|cut -d. -f3`"
    nm4="`echo $mask|cut -d. -f4`"

    local pre=32
    for nm in $nm4 $nm3 $nm2 $nm1 ; do
        i=8;
        while :; do         
            if [ "$((nm & 0x1))" != "0" ]; then  
                pre=$((pre-8+i))
                eval "$2=$pre"
                return;
            fi
            nm=$((nm=nm>>1))

            i=$((i-1))
            if [ "$i" = "0" ]; then 
                pre=$((pre-8))
                break
            fi
        done
    done

    eval "$2=0"
    return;
}

sl_prefix_to_netmask()
{
    local mask="$1"
    local div="$((mask / 8))"
    local rem="$((mask % 8))"
    
    # fix rem 
    if [ "$rem" != "0" ]; then
        local i=1
        local buf=0
        while :; do
            buf=$(((buf+(1<<(8-i)))))
            i=$((i+1))
            if [ "$i" = "$((rem+1))" ]; then
                rem=$buf
                break
            fi
        done
    fi

    if [ "$div" = "4" ]; then
        eval "$2=255.255.255.255"
    elif [ "$div" = "3" ]; then
        eval "$2=255.255.255.$rem"
    elif [ "$div" = "2" ]; then
        eval "$2=255.255.$rem.0"
    elif [ "$div" = "1" ]; then
        eval "$2=255.$rem.0.0"
    elif [ "$div" = "0" ]; then
        eval "$2=$rem.0.0.0"
    fi
}

